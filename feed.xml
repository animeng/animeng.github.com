<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://mengtnt.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://mengtnt.com/" rel="alternate" type="text/html" /><updated>2022-04-10T10:52:06+00:00</updated><id>https://mengtnt.com/feed.xml</id><title type="html">mengtnt的Blog</title><subtitle>走自己的路，让别人说去吧</subtitle><author><name>mengtnt</name></author><entry><title type="html">深入理解LINUX内核</title><link href="https://mengtnt.com/2022/03/16/readlinux.html" rel="alternate" type="text/html" title="深入理解LINUX内核" /><published>2022-03-16T07:05:06+00:00</published><updated>2022-03-16T07:05:06+00:00</updated><id>https://mengtnt.com/2022/03/16/readlinux</id><content type="html" xml:base="https://mengtnt.com/2022/03/16/readlinux.html">&lt;p&gt;最近在读《深入理解LINUX内核》这本书让我想起来大学时代的《深入理解计算机系统》、《编译原理》、《操作系统》这几本红宝书。这种类型的书，由于设计的技术细节过于庞大，所以想读一遍了解其中的原理不太可能，在我看来读这种类型的书，一遍最多也就能理解其中10%的内容。现在已经工作了10多年，重新看了下看能不能再多懂10%。&lt;/p&gt;

&lt;p&gt;言归正传，本篇博客自己想记录下对书中一些原理的理解，感受下Linux系统的巧妙之处。再来可以借鉴下Linux很多的设计思想，也可以应用到平时工作中业务逻辑的设计。当然博客篇幅有限，仅仅记录下操作系统核心业务的某些思想以供借鉴。&lt;/p&gt;

&lt;p&gt;说到操作系统核心业务，主要是进程和内存管理，本质是就是管理cpu和存储系统。所以下面的几点内容都是从进程和内存管理的章节中选取的知识点。&lt;/p&gt;

&lt;h2 id=&quot;内存管理&quot;&gt;内存管理&lt;/h2&gt;

&lt;p&gt;假如没有操作系统，程序如何操作内存呢？那就要管理每一个内存地址的读取和存储了，对于不同的硬件内存排布都各不相同，所以使用不同的硬件就要写一套不同的内存管理方法。操作系统本质上就是对内存这个硬件增加了一个抽象，上层程序只需要使用虚拟地址来访问就可以，底层如何分配物理地址交给操作系统来做。&lt;/p&gt;

&lt;p&gt;由于操作系统抽象了一层虚拟内存，用户程序仅仅操作虚拟地址，那么虚拟地址如何转换成物理地址呢？这里就要从程序装载的过程说起了。如果程序不是运行在虚拟机上，本质上操作系统装载的都是机器码。写过汇编代码的都知道，在定义程序代码时，需要定义代码段(CS)、数据段(DS)、堆栈段(SS)，并且代码里面写的 &lt;code class=&quot;highlighter-rouge&quot;&gt;mov 0x8049509 exa &lt;/code&gt; 这里的地址都是逻辑地址。操作系统通过程序段定义段的逻辑地址，再转换出程序所需要的虚拟地址。可以看下图所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/readLinux-logic-1.jpg&quot; alt=&quot;图1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图中最终的线性地址就是平时我们说的虚拟地址。其实Linux中逻辑地址等于虚拟地址。因为Linux所有的段（用户代码段、用户数据段、内核代码段、内核数据段）的线性地址都是从 0x00000000 开始，线性地址=0x00000000+逻辑地址(偏移量)，也就是说逻辑地址等于虚拟地址了。像Windows系统就会在加载程序时，会有逻辑地址转换虚拟地址的过程。Linux舍弃这一步的目的是为了高效，这样Linux就可以直接把所有的逻辑地址映射到我们下面要说的页表中了。&lt;/p&gt;

&lt;p&gt;在写汇编代码时，会发现程序中所有操作的内存都是连续的，这样很方便我们管理内存的读取。那操作系统如何把程序中所有连续的虚拟地址，映射到物理地址中。这个过程就需要用到页表。页表
 是分配物理内存的最小单元，有4K，16K等等，系统每次申请地址时，都是按照页的单元来的。这样可以保证硬件的最高效运作。&lt;/p&gt;

&lt;p&gt;这里可能就有人疑问了，如果每个虚拟地址都要从页表中查找的话，存储页表是不是很浪费空间。如果是4K的页面，1G点内存，岂不是就要 &lt;code class=&quot;highlighter-rouge&quot;&gt;1024/4 = 256M&lt;/code&gt;。所以就产生了多级页面，多加几个目录不就可以了么？如下图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/readLinux-page-2.jpg&quot; alt=&quot;图2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图就是Linux操作系统中常用的三级页表，1G内存也仅仅只需要4M的页表就可以完成寻址，提高寻址速度的同时，也大大节省了空间。&lt;/p&gt;

&lt;p&gt;上面只是简单的介绍了Linux的分页系统，为了提高分页效率有很多种分页算法，这里限于篇幅也不再介绍。在看到这的时候，想到了平时在做业务时，遇到平台统一性问题上时，就可以借鉴下操作系统如何通过增加一层抽象来对内存管理，从而磨平了平台的差异。在解决业务效率的时候，也可以通过分表的思想提高访问的速度。&lt;/p&gt;

&lt;h2 id=&quot;进程管理&quot;&gt;进程管理&lt;/h2&gt;

&lt;p&gt;进程是操作系统系统基本的执行单元。在Linux操作系统中，有一个概念叫轻量级进程(lwp)。咋一看这不就是进程，其实不然。为啥Linux不按照操作系统的概念，老老实实的做一个进程的管理呢？我理解的本质上是为了更好的重用，进程其实是一个很复杂的概念，包含了cpu调度以及需要管理各种调度的资源。而lwp其实仅仅抽象了cpu的调度过程，主要包含了cpu中寄存器上下文切换的过程和一些必须的资源管理。&lt;/p&gt;

&lt;p&gt;在Linux的top和ps命令中，默认看到最多的是pid (process ID)，也许你也能看到lwp (thread ID)和tgid (thread group ID for the thread group leader)等等。所以本质上Linux的进程是由lwp和一些共享资源组合而成的，并且lwp还可以作为内核的线程。另外这里我想说PThread其实是用户进程，通过一些库函数模拟线程的并发执行的效果，生效范围其实不在系统级别，不是lwp的级别。所以对于不同的操作系统来讲，进程和线程的实现方式并不相同，但是他们理念都大同小异，都是对cpu的调度和资源的管理。&lt;/p&gt;

&lt;p&gt;下面我们来看下进程管理的一个核心函数，进程切换。下面我列下书中介绍的进程切换的核心代码如下:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;cp&quot;&gt;#define switch_to(prev, next, last)                 \
do {                                    \
    prepare_switch_to(next);                    \
                                    \
    ((last) = __switch_to_asm((prev), (next)));         \
} while (0)
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;里面专门介绍了为何A，B进程切换需要三个参数，last参数的作用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/readLinux-switch-3.jpg&quot; alt=&quot;图2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;假定3个进程A、B和C在系统上运行。在某个时间点，内核决定从进程A切换到进程B，然后从进程B切换到进程C，接下来再从进程C切换回进程A。在每个switch_to调用之前，next和prev指针位于各进程的内核栈上，prev指向当前运行的进程，而next指向将要运行的下一个进程。为执行从prev到next的切换，switch_to的前两个参数足够了。对进程A来说，prev指向进程A而next指向进程B。&lt;/p&gt;

&lt;p&gt;在进程A被选中再次执行时，会出现一个问题，控制权返回至switch_to之后的点，如果栈准确地恢复到切换之前的状态，那么prev和next仍然指向切换之前的值，即next=B，而prev=A。在这种情况下，内核无法知道实际上在进程A之前运行的进程是C。&lt;/p&gt;

&lt;p&gt;从上面的描述可以看出，switch_to这个函数非常特殊，在从C进程切回到A进程时，在切换的上半部分是在进程C中运行的，而下半部分是在进程A中运行的，所以A进程需要读取第三个参数last才能知道是从C切换过来的。&lt;/p&gt;

&lt;p&gt;Linux为了提高进程切换的效率，才使用这种如此不好理解的方式。其实如果我们能引入一个进程管理的进程就会更加的清晰，但是效率自然也就牺牲了。我引用下一个网友对此问题的看法。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Linux中没有专门的调度管理线程虽然咋一看很不美观，但是它毕竟不是微内核结构，大内核的 优点就是高效，直接让需要切换的进程自己调用切换代码另外别的进程就绪后告诉正运行的进程有切换需要然后着手调度，这种方式肯定最高效，如果设置了调度管 理线程，需要调度时还要通知这个管理器，很多切换很低效，但是却很美观。这一点上，Linux中的调度是和谐自发的抢占式协作，而带有调度管理器的内核对 于调度则是强行的管制。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以我们平时在做一些业务时，为了提升效率，往往会采用一些很诡异(trick)的手段，虽然目的达到了，但是牺牲了代码的可读性。这也是Linux设计哲学的权衡，因为效率被看做Linux系统的最高优先级。&lt;/p&gt;

&lt;h2 id=&quot;中断&quot;&gt;中断&lt;/h2&gt;

&lt;p&gt;在内核的进程切换时，我们提到过上下文切换。其实中断本质上也是一种上下文切换。但是中断处理和进程切换有一个明显的差异: 由中断处理执行的代码并不是一个进程，我们常常用内核控制路径(kernel control path)来代表中断发生时，正在执行的程序。可以说中断处理的程序比lwp还要轻量级。&lt;/p&gt;

&lt;p&gt;中断在cpu中经常发生，所以中断的效率异常重要。下图展示了中断请求发生时，数据处理的过程。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/readLinux-int-4.jpg&quot; alt=&quot;图2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从上图中可以看出，分为上下两个部分。上部被称为硬中断处理，只有一些比较紧急的功能，它往往只是简单地读取寄存器中的中断状态并清除中断标志后就进行“登记中断”的工作。“登记中断”意味着将下半部处理程序，挂到后续的执行队列中去。下半部分是真正处理中断请求的程序逻辑。Linux下半部分处理有软中断、tasklet、工作队列。这里不过多介绍。&lt;/p&gt;

&lt;p&gt;结合我们平时写代码时，用到的定时器，操作系统处理的过程是，根据cpu发出的时钟中断，达到用户设置定时器时间，就发生一个软中断，等待用户程序处理。但是何时处理，就跟整个系统的吞吐能力有关系了。所以平时的定时器中断，运行到处理程序时，时间并不是100%准确的。&lt;/p&gt;

&lt;p&gt;从中可以看出，为了系统的可用性和吞吐能力，中断的设计就非常的巧妙，既解决了同时可以响应多个外设输入的问题，又解决了响应慢的问题。所以我们在处理一些业务的时候，不妨把业务的操作更加细分，就可以达到并发执行的效果，提高了业务的效率和吞吐率。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;Linux是实现了操作系统这个复杂的业务的一种系统，我们平时做的业务可能远远没有这么复杂，也不会要求如此高的效率，但是从Linux的设计实践中，我们可以借鉴很多的理念和方法来提高我们业务的效率。如果再做10年的业务，回头看这本书，可能会有另外的感悟。&lt;/p&gt;

&lt;p&gt;在感叹到Linux的精妙设计的同时。也会感受到其中的复杂，到现在很多设计理念我还是一知半解，可能大多数人都要花上很多年才能读懂这本书。可是Linux随着时间的发展，仍然在不定的迭代和进步。所以人类的知识体系只会越来越复杂，那么人类的进化速度是否可以赶上知识复杂演变的速度呢？之前记得读过一篇文章讲到，人类可能会因为构建过于复杂的世界而崩溃，因为没有一个人可以理解，所处系统的运行机制。这个哲学问题也留给大家来思考了。&lt;/p&gt;</content><author><name>mengtnt</name></author><summary type="html">最近在读《深入理解LINUX内核》这本书让我想起来大学时代的《深入理解计算机系统》、《编译原理》、《操作系统》这几本红宝书。这种类型的书，由于设计的技术细节过于庞大，所以想读一遍了解其中的原理不太可能，在我看来读这种类型的书，一遍最多也就能理解其中10%的内容。现在已经工作了10多年，重新看了下看能不能再多懂10%。</summary></entry><entry><title type="html">云原生的思考</title><link href="https://mengtnt.com/2022/01/01/thinkcncf.html" rel="alternate" type="text/html" title="云原生的思考" /><published>2022-01-01T07:00:04+00:00</published><updated>2022-01-01T07:00:04+00:00</updated><id>https://mengtnt.com/2022/01/01/thinkcncf</id><content type="html" xml:base="https://mengtnt.com/2022/01/01/thinkcncf.html">&lt;p&gt;2022年即将到来之际，收到腾讯云服务器友好的提醒：“尊敬的用户，你xxxx云服务器资源将于2021.12.30号到期，到期后将在一天后停止服务，停服后数据为你保留7天，逾期未续费资源将被释放”。我想着企业都不容易，毕竟年底了续个费吧。一打开续费页面，续费的话一年将近2000RMB，虽然自己知道续费肯定会贵一些，但是着实还是震惊了下。毕竟当时买的腾讯云服务器3年也就300多块钱。&lt;/p&gt;

&lt;h2 id=&quot;续费之路&quot;&gt;续费之路&lt;/h2&gt;

&lt;p&gt;自己想着年底各种优惠活动应该有优惠券吧，就从腾讯云的官方看了下，果然有，然后美滋滋的领了老用户续费券一年就只要300多块钱了。正准备续费的时候，我思考了下，为啥服务器续费的价格涨的这么离谱，我这台服务器也就自己的博客和一个MySQL数据库，以及自己一些日常自动化的脚本在运行。不至于占用这么多资源吧。&lt;/p&gt;

&lt;p&gt;同时我看了下腾讯云的销售政策，新用户注册同样的服务器一年只要79块钱，心里有些不平衡了。腾讯这不就是杀熟客行为，难道腾讯不怕客户跑路么？仔细想了下，这不就是典型的ToB行业的销售套路么？先用底价让你入坑，然后之后一行代码可能就是你原来入坑的几十倍。&lt;/p&gt;

&lt;h2 id=&quot;迁移成本&quot;&gt;迁移成本&lt;/h2&gt;

&lt;p&gt;其实ToB服务的企业，敢于这样干的本质原因，就是企业服务的迁移成本。典型的像给企业提供CRM服务，当你的企业客户数据都离不开他们的服务时，这时候企业就可以加价了，因为这时候他们在市场上已经没有对手了，被服务的企业也很无奈，因为迁移成本往往会很大，只要价格不要高的太离谱，他们自然会怪怪付费。这就是为什么说做SAAS服务的企业，往往收入相对稳定，比做ToC企业稳定性好很多。ToC的企业一个功能体验没做好，得罪了用户他们立马可能就转头去用另一个企业的产品了，用户花费的成本可能仅仅是重新下载一个新APP而已。&lt;/p&gt;

&lt;p&gt;那么这样情况有没有破局那？尤其像云服务市场，如果一个企业的所有服务器都是通过一家公司购买的，想要迁移到另一个家公司成本会有多高哪？虽然自己服务器上也就5，8个服务在跑，和企业服务没发相提并论。不过自己想对比下迁移的成本到底有多高。然后就花了79块钱买了一个新的服务器。下面就描述下自己的迁移过程。&lt;/p&gt;

&lt;h2 id=&quot;服务迁移&quot;&gt;服务迁移&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;新购买的服务器首先要配置服务器的秘钥，方便用ssh登陆管理服务器。以及修改sshd_config一些配置。大概花费了半小时时间。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;下载一些常用的软件，其实我这里主要是git和docker。git是因为要下载自己服务的源码而docker是要部署这些服务。这个就看网路了，10几分钟。（现在很多轻量级服务器都自带docker了）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;下载源码开始编译构建所有基于docker的服务，这个构建过程可能比较久大概用了1个小时，自己服务用的环境主要是ruby、node、mysql、php、Nginx。这个过程全称都不需要我操作。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;修改防火墙的配置，开发端口让外面的服务器访问。几分钟左右。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;修改域名解析，自己用的godaddy域名，解析使用的时间，10分钟左右。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;总计自己晚上搞了2到3个小时，把所有的服务器迁移好了。然后自己心里美滋滋，毕竟省下了2000块钱。这么顺利的迁移其实自己还是很意外的。&lt;/p&gt;

&lt;p&gt;犹记得2011年那时候，当时云计算百家争鸣，自己买过新浪的云服务SAE(新浪当时的服务对标Google App Engine（GAE))。然后部署了一个网站和几个接口的服务，用的环境是Python。新浪SAE可以选择服务器自带python环境，由于自己的服务时基于Python的web2py框架，用了SAE后，只要简单的增加一些和平台的相关的配置就很快可以运行了。&lt;/p&gt;

&lt;p&gt;只有由于一些业务迭代，接入他们的MemCache已经使用了SAE的MySQL数据库。这个服务运行一年后，感觉费用成本方面已经远远超过了阿里云。所以就想迁移到阿里云服务器，买了阿里云服务器后，部署了自己的源码，发现各种各种报错和接口不同，改动这些问题，花了1，2天的时间才迁移成功。&lt;/p&gt;

&lt;p&gt;从上面看出当时服务器迁移的成本还是挺高的，自己就一个简单的服务就迁移了这么久，可想如果是一个企业那肯定要更高的成本。其中迁移困难的本质原因，就是每个云服务器配置都有他们自己特殊定制的功能，虽然SAE有Python环境，但是要完全使用平台的环境，需要侵入自己的源码，增加一些平台相关的配置。阿里云的服务和新浪的这些标准都各不相同，就造成了迁移的成本非常的巨大。&lt;/p&gt;

&lt;h2 id=&quot;云原生&quot;&gt;云原生&lt;/h2&gt;

&lt;p&gt;正应了那句名言“天下大势合久必分，分久闭合”，自从云计算服务出来后，各家公司都在争夺这个领域，然后亚马逊、微软、谷歌、阿里云这几个厂商在各自的区域拔得头筹。但是云计算各个平台的标准并不统一，本质上很容易造成上面我说的局面，也因为这些弊端，一些中小企业并不是很乐意上云，毕竟迁移成本还是很大的问题。所以统一云服务的标准势在必得，云原生的概念顺势而出了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;云原生的概念，由来自Pivotal的MattStine于2013年首次提出，被一直延续使用至今。这个概念是Matt Stine根据其多年的架构和咨询经验总结出来的一个思想集合，并得到了社区的不断完善，内容非常多，包括DevOps、持续交付、微服务、敏捷基础设施和12要素等几大主题，是一套典型上云指导思想和方法论，同时提供具体的操作工具。采用基于云原生的技术和管理方法，可以更好地把业务生于“云”或迁移到云平台，从而享受“云”的高效和持续的服务能力。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;云原生的概念提出来以后。拥抱最多的企业就是谷歌。并且一直在推动和实践这个行为，谷歌这种做法也不无道理。为何要统一化云计算服务的标准哪？因为谷歌看到了亚马逊在云服务市场赚到盆满钵满。谷歌用的打法和当年的Android如初一辙，指定标准和开源，推出了k8s和docker这两种云原生的利器。&lt;/p&gt;

&lt;p&gt;谷歌用这种方式对云服务市场进行的破局方式。当年的Android的套路很像通过统一标准，来降低企业依赖平台的系数。让企业可以更放心的选择迁移自己的云服务厂商。就跟Android一样，出来一个开源的标准所有厂商接入就行了。这样就消除了很多企业的顾虑，大家自然就都原因干这个事情，同时竞争也就会上来了。所以当时Android和微软、苹果的竞争中，才能后来居上。&lt;/p&gt;

&lt;p&gt;不过谷歌的这种打法，必然会造成云计算行业厂商的利润下降，但是整体的云服务质量就会上升。其实长远来看还是很有利行业的发展。下面引用下云原生的常用概念。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;其实从云原生概念上来看，云原生比上云更进一步，不再是一个方向或者指导思想，而是明确了上云的方式和最佳实践。CNCF TOC张磊分享他对云原生的理解：“云原生是一条最佳路径或者最佳实践。更详细的说，云原生为用户指定了一条低心智负担的、敏捷的、能够以可扩展、可复制的方式最大化地利用云的能力、发挥云的价值的最佳路径。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;从上面可以看出云原生本质上就是为了解决各家云厂商标准的问题，如果大家都遵循了这个原则，那么企业只要关注自己业务的代码。写完之后想从一个云上迁移到另一个都很容易，因为标准是统一的不会出现不兼容。&lt;/p&gt;

&lt;h2 id=&quot;未来展望&quot;&gt;未来展望&lt;/h2&gt;

&lt;p&gt;云计算服务行业是典型的ToB企业，ToB的企业价值做到最后，往往就像工业时代的水电煤一样，成本会回归到事物本身的价值。往往不像ToC的行业利润可以做到很高，很重要的一点就是Toc行业很难形成统一的服务标准。对于Toc行业来说，首先有庞大的用户群体，并且每个用户的需求都不一样，要各种定制化的需求，统一就很难。但是如果是服务企业的话，本身群体不会特别大，并且标准统一反而有利于企业做迁移，所以统一就相对容易一些。&lt;/p&gt;

&lt;p&gt;其实这也是市场发展的必然过程。任何行业想要降低成本的过程中，提供更好的服务，一定是大家形成统一的标准，可以自由的竞争，然后回归到价值本身了。这也是为什么很多国家会有垄断法，因为一旦一个行业被垄断了，用户迁移成本无限大的时候，垄断的企业就可以漫天要价。&lt;/p&gt;

&lt;p&gt;从云计算的发展中也可以看出现在市场经济，往往价值最高的产品就是市面上没有统一的标准，需要给用户特殊定制的(这里的价值是说对提供的企业赚钱的多少，并不代表对整个行业的价值很高)。一旦一个行业形成了标准，大家都可以按照这个标准产出东西的时候，就意味着这个行业的利润已经基本回归到价值本身了。其实本质上这更利于行业的蓬勃发展，就跟现在的建筑、硬件制造、汽车制造行业，大家可以百家争鸣，同时消费者也能享受到更好的服务。这才是健康有利的发展。&lt;/p&gt;

&lt;p&gt;所以所谓红海市场，本质上是行业还处于标准不统一的节点，同时也是企业最能赚到原始资本的地方，一旦行业形成标准，最终市场都会归于冷静，也就回归到理性的价格。不仅想起一句俗语”尘归尘,土归土,及尽繁华,不过一掬细沙”。所以云原生现在蓬勃的发展也是印证了这个道理。&lt;/p&gt;</content><author><name>mengtnt</name></author><summary type="html">2022年即将到来之际，收到腾讯云服务器友好的提醒：“尊敬的用户，你xxxx云服务器资源将于2021.12.30号到期，到期后将在一天后停止服务，停服后数据为你保留7天，逾期未续费资源将被释放”。我想着企业都不容易，毕竟年底了续个费吧。一打开续费页面，续费的话一年将近2000RMB，虽然自己知道续费肯定会贵一些，但是着实还是震惊了下。毕竟当时买的腾讯云服务器3年也就300多块钱。</summary></entry><entry><title type="html">异常和错误处理</title><link href="https://mengtnt.com/2021/11/09/idempotence.html" rel="alternate" type="text/html" title="异常和错误处理" /><published>2021-11-09T02:25:11+00:00</published><updated>2021-11-09T02:25:11+00:00</updated><id>https://mengtnt.com/2021/11/09/idempotence</id><content type="html" xml:base="https://mengtnt.com/2021/11/09/idempotence.html">&lt;p&gt;异常和错误，咋一看往往都会以为是一个事情。这里首先要定义下本文异常和错误的概念，以便于可以区分通用的概念。在程序运行中如果发生了问题，但是这个问题如果通过增加相应的程序逻辑可以恢复的叫做异常。如果因为程序逻辑问题引起的不可恢复的异常叫错误，也就是通常所说的程序的BUG。&lt;/p&gt;

&lt;p&gt;定义好了这两个概念后，可能会有疑问为什么要这样定义，异常和错误在我们通用理解的意义上是一个同义词，没有本质的区别。其实在程序设计的发展过程中，最开始这两个概念也是没什么区别的，但是随着软件设计越来越复杂慢慢衍生出来这两个概念。&lt;/p&gt;

&lt;h2 id=&quot;异常的演变&quot;&gt;异常的演变&lt;/h2&gt;

&lt;p&gt;首先看下比较早期的C语言。&lt;code class=&quot;highlighter-rouge&quot;&gt; Assert &lt;/code&gt;这个关键字在C语言中很常见，本质上是处理程序设计的错误的，一旦出现断言执行，函数提供者是没有能力恢复这个问题的，需要调用方检查问题，后面如果程序继续运行下去，可能发生不可预知的问题。&lt;/p&gt;

&lt;p&gt;一旦执行到&lt;code class=&quot;highlighter-rouge&quot;&gt; Assert &lt;/code&gt;，说明函数的调用方的程序是有bug的，没有正确的使用函数，显然是符合我们上面定义的错误概念。&lt;/p&gt;

&lt;p&gt;再来说下异常，那么在C语言中如何处理异常的情况？在调用C函数的时候，如果可能发生异常，往往使用函数返回值表示如下。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 返回值表示成功或者失败&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;调用者看到这种类型的API，往往需要增加&lt;code class=&quot;highlighter-rouge&quot;&gt; if-else &lt;/code&gt;的判断，来让程序正确的执行，其实这就是早期的异常处理的方式。现在很多语言也是用这种方式来处理的。但是缺点也很明显，程序中需要写大量的&lt;code class=&quot;highlighter-rouge&quot;&gt; if-else &lt;/code&gt;语句，不利于代码的阅读和维护。&lt;/p&gt;

&lt;h2 id=&quot;异常的定义&quot;&gt;异常的定义&lt;/h2&gt;

&lt;p&gt;为了保证程序的健壮性，同时保证代码书写的便捷性。很多高级语言开始定义了异常的概念，例如C++是很早就在语法中定义了exception。&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// protected code&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;createMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;userMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;releaseMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExceptionName&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// code to handle ExceptionName exception&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;handlerExcepiton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样try模块中，所有可能异常的函数都可以一行代码调用，不用像C语言这样写大量的&lt;code class=&quot;highlighter-rouge&quot;&gt; if-else &lt;/code&gt;处理。这对于代码的阅读性自然很好，但是同样存在一个问题就是性能。为什么大量使用异常处理代码会引起性能问题哪？&lt;/p&gt;

&lt;p&gt;这个就涉及到异常实现的逻辑了。函数中为了捕获异常，需要额外的开辟一些空间给异常对象使用。同时异常一旦发生需要中断函数的调用堆栈，指向异常处理函数。这个过程被称为堆栈展开。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;当我们调用某些函数时，它将地址存储到调用堆栈中，从函数返回后，需要弹出该地址以开始其剩余的工作。堆栈展开是一个在运行时删除函数调用堆栈条目的过程。要删除堆栈元素，我们可以使用异常。 如果内部函数引发异常，则将删除堆栈的所有条目，并返回到主调用程序函数。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;并且不仅上面说的这个开销，因为异常出现的函数，可能很早就被调用了，但是很晚才开始使用catch捕获。这时候就需要把异常数据层层传递给需要处理的函数。所以从上面来看异常这个处理过程，对比一个&lt;code class=&quot;highlighter-rouge&quot;&gt; if else &lt;/code&gt;简单的语句，必然是很消耗性能的。对于C++这种性能要求比较高的程序语言，异常这个性能问题一直被诟病。所以C++在使用异常的时候有很多约束，也造成了异常处理在C++语法中，很难广泛的使用。下面列下微软对C++异常处理使用的建议：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;使用断言来检查绝不应发生的错误。 使用异常来检查可能出现的错误，例如，公共函数参数的输入验证中的错误。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当处理错误的代码与通过一个或多个干预函数调用检测到错误的代码分离时，使用异常。 当处理错误的代码与检测到错误的代码紧密耦合时，考虑是否使用错误代码而不是在性能关键循环中。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对于可能引发或传播异常的每个函数，请提供以下三种异常保证之一：强保障、基本保证或 nothrow (noexcept) 保证。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;按值引发异常，按引用来捕获异常。 不要捕获无法处理的内容。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不要使用 c + + 11 中已弃用的异常规范。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;应用使用标准库异常类型。 从 exception 类层次结构派生自定义异常类型。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不允许对析构函数或内存释放函数进行异常捕获。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;并且C++是兼容C语言的，C++里一些库是用C实现的，如果引入异常的语法，是需要兼容很多C的库。可以看出来异常在C++中使用的难处了。下面引用下C++创始人施特劳斯的原话，大家可以看下异常处理的难言之隐。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;对于异常处理的性能问题，其实是一个很有争议的问题，有人觉得异常处理是多做了一些工作，肯定对性能是有影响的。但是也有人觉得异常处理的影响，和增加一个 if-else 属于同种量级，对性能的影响其实微乎其微，是在可以接受的范围内的。强大的错误处理对于任何编程语言都很有挑战性。 尽管异常提供了多个支持良好错误处理的功能，但它们无法为你完成所有工作。 若要实现异常机制的优点，请在设计代码时记住异常。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;异常的晋级&quot;&gt;异常的晋级&lt;/h2&gt;

&lt;p&gt;虽然通用的异常处理对于性能有一定消耗，但是它的优点还是很诱人的，尤其对于不依赖C语言的高级语言，没有了兼容性的负担，好处更是大于缺点。下面列出来对于很多高级语言，需要异常处理语法的理由。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;代码的阅读更顺利。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果不用通用的异常处理，构造函数初始化异常必须要开发者处理。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可以在运行时，减少错误崩溃的发生。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;没有通用异常处理，API需要写大量的处理函数返回值的逻辑，如果是异步的需要大量的callback。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;没有兼容C语言的负担。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基于上面的优点像java，C#，swift这些强类型语言都有异常处理语法，其中java算是比较早的完善了异常处理的语法。但是各个语言异常处理的逻辑还是有细微的差别，这里拿java和swift语言对比下各自的异常处理。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt; 
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在java中如果执行这段代码会打印出&lt;code class=&quot;highlighter-rouge&quot;&gt; ArrayIndexOutOfBoundsException &lt;/code&gt;异常，异常可以被捕获不会崩溃。下面看下swift同样想捕获数组越界的异常。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arrayList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Array out of bounds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;编译时会抛出来 ` ‘catch’ block is unreachable because no errors are thrown in ‘do’ block ` 这个警告，本质上编译器是不处理这个异常的。然而运行时，会崩溃抛出&lt;code class=&quot;highlighter-rouge&quot;&gt; Fatal error: Index out of range &lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;因为swift语言的设计理念认为数组越界是程序编写的逻辑错误，一旦出现就无法恢复程序正常的逻辑，所以理应崩溃，便于开发者发现问题。而java语言是认为这个异常，如果程序捕获了就代表有能力处理恢复这个异常。所以相对来讲java的异常定义的范围更广泛，而swift相对比较苛刻。&lt;/p&gt;

&lt;p&gt;从上面的对比可以看出，java语言设计更倾向于程序的开发便捷性和安全性，可以适当牺牲性能的开销。而swift语言相对来讲对性能要求还是比较苛刻的。还有一个明显的例子在java中，如果一个函数做了如下的异常定义。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Map must be greater than zero&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数调用者必须使用如下的方式处理，否则编译会报错。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;createMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;本质上java语言设计者认为，如果函数抛出了异常，那么代表着调用者有能力去恢复这个异常，这保证了程序的健壮性。但是swift设计虽然和java这点类似，如果函数抛异常不处理会编译错误。但是可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt; try! &lt;/code&gt; 这个便捷的语法忽略异常，这就代表swift还是要考虑异常性能的开销。不过事物都有两面性，一旦使用了&lt;code class=&quot;highlighter-rouge&quot;&gt; try! &lt;/code&gt;出了异常程序就要崩溃，这会对程序员的代码质量进行严格考验。&lt;/p&gt;

&lt;p&gt;最后想说下Rust语言异常处理的逻辑，和大多数&lt;code class=&quot;highlighter-rouge&quot;&gt; try-catch &lt;/code&gt;设计方式还是不一样的，下面是官方的解释:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Rust 有一套独特的处理异常情况的机制，它并不像其它语言中的 try 机制那样简单。首先，程序中一般会出现两种错误：可恢复错误和不可恢复错误。可恢复错误的典型案例是文件访问错误，如果访问一个文件失败，有可能是因为它正在被占用，是正常的，我们可以通过等待来解决。但还有一种错误是由编程中无法解决的逻辑错误导致的，例如访问数组末尾以外的位置。大多数编程语言不区分这两种错误，并用 Exception （异常）类来表示错误。在 Rust 中没有 Exception。对于可恢复错误用 Result&amp;lt;T, E&amp;gt; 类来处理，对于不可恢复错误使用 panic! 宏来处理。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以rust语言对异常处理感觉更符合异常定义的本质，只是对于开发者来讲可能会麻烦些，不能无脑的写&lt;code class=&quot;highlighter-rouge&quot;&gt; try-catch &lt;/code&gt;了，写之前要分清楚异常和错误这个概念了。不过这样也会让你的程序的安全性、健壮性、性能开销，这几个方面更加优秀。&lt;/p&gt;

&lt;h2 id=&quot;异常的使用&quot;&gt;异常的使用&lt;/h2&gt;

&lt;p&gt;所以我们在写代码的时候，尤其是写对外使用的API时，一定要先搞清楚这个API的使用过程中可能产生的异常和错误。这里我列出来几个日常设计的点。&lt;/p&gt;

&lt;h3 id=&quot;1-函数的入参要做合理的检测如果不符合的参数及时用异常处理&quot;&gt;1. 函数的入参要做合理的检测，如果不符合的参数及时用异常处理&lt;/h3&gt;

&lt;p&gt;因为接口设设计时，往往对数据的要求是宽进严出，以方便其他程序将输出作为输入，说白了就是“把复杂留给自己，把简单留给别人”。但是哪些参数是需要处理为异常的？这里拿个简单的例子。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;answerCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 如果接收的对象不符合函数的定义，抛出错误。&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isNot&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iscomming&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 处理接听的状态&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看出来上面的接听电话的逻辑，首先如果接收的参数不符合函数的定义那肯定是调用方的bug，应该抛出错误。不过现在很多编程语言基本都会做类型检测，如果不符合就会编译出错或者警告，所以这种防御不太会写。&lt;/p&gt;

&lt;p&gt;再看第二个条件判断，就是如果接听的电话不是正在来电的用户，那说明这个参数也是有问题的，需要告诉调用者这个异常。所以如果在这里&lt;code class=&quot;highlighter-rouge&quot;&gt; return &lt;/code&gt;就显得不是很合理，因为这个异常其实被隐藏了，上层感知不到就无法排查错误。如果按照C的异常的常用写法就需要给answerCall增加一个是否成功的返回值。如果是java等高级语言只要如下写。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;answerCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iscomming&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 处理接听的状态&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-api设计不增加无用的输出尽量做成事务的操作&quot;&gt;2. API设计不增加无用的输出，尽量做成事务的操作。&lt;/h3&gt;

&lt;p&gt;这个原则说白了，就是为了保证出现异常后所有的状态恢复成原始状态，不要出现中间状态。&lt;/p&gt;

&lt;p&gt;我们继续看上面的例子。接听的参数检测成功后，进入接听状态，首先改变接听者本地的状态，然后请求网络，最后接听成功。假如说上层的API连续调用两次，为了防止频繁做网络请求做了下面的防御编程。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;answerCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iscomming&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 处理接听的状态&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;changeStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 如果已经正在接听就返回，防止多次请求。&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isAnsering&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;requestAccept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reportAccept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这种方式其实就违背了刚才说的，不要增加无用的输出原则。因为changeStatus()被调用了两次，一旦有地方监听这个状态变化可能就造成未知的问题。这时候最好的选择，就是和参数拦截一样在最开始的位置就抛出异常。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;answerCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iscomming&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 如果已经正在接听就返回，防止多次请求。&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isAnsering&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 处理接听的状态&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;changeStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;requestAccept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reportAccept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果说函数的提供方，认为多次调用这种异常，自己可以处理，比如直接返回就代表处理了这个异常，上层可以不感知。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;answerCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iscomming&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 如果已经正在接听就返回，防止多次请求。&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isAnsering&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 处理接听的状态&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;changeStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;requestAccept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reportAccept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其实函数的幂等性要求，本质上就是对多次输入这种异常处理的过程。这种写法代表接收方处理了这种错误，不需要调用方关心，并且保证每次调用都返回同样的结果。假如一些程序由于特殊状态的原因，无法应用幂等性原理就应该及时抛出异常。告诉上层的调用者出了问题，让上层调用者来恢复这个操作。&lt;/p&gt;

&lt;h3 id=&quot;3-记住错误是让程序以最低成本恢复正常的一种方式如果你定义的api有严格的状态维护让程序及时的崩溃比抛出异常更容易发现问题&quot;&gt;3. 记住错误是让程序以最低成本恢复正常的一种方式。如果你定义的API有严格的状态维护，让程序及时的崩溃比抛出异常更容易发现问题&lt;/h3&gt;

&lt;p&gt;断言是一种出现严重错误才会使用的方式，一旦使用断言就代表调用方的程序一定是出了bug，不正常的逻辑，并且接收方无法处理这种情况，需要及时的终止程序以便于调用方修改此处的bug。&lt;/p&gt;

&lt;p&gt;不过现在很多软件为了用户体验，减少闪退的次数，往往断言在release版本中会移除掉。带来的后果是出问题的代码被隐藏了，一些奇怪的问题就很难及时发现。所以经常有开发者在争论断言是否应该使用在release版本。&lt;/p&gt;

&lt;p&gt;据说NASA和很多银行系统的软件，断言都会在release版本中，因为这些系统对安全性要求极高，一旦出了bug需要立即终止，否则可能造成不可估量的灾难。而对于安全性要求不高的系统，为了获得更高的用户体验往往release版本会移除断言。不过孰对孰错怕是永远没有完美的答案。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;上面分析了这么多，那我们实际编码中，如何对异常处理哪？是否需要写大量的&lt;code class=&quot;highlighter-rouge&quot;&gt; if-else &lt;/code&gt;或 &lt;code class=&quot;highlighter-rouge&quot;&gt;try-catch&lt;/code&gt;语句哪？其实本质上来讲，按照下面的判断原则来做就可以了。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;首要要看产生的问题是因为调用者不正确的使用API造成的么？如果是就用断言拦截。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果调用一个API，某些异常无法避免(比如很多IO设备的读取，很可能因为硬件不可用的问题造成。这种往往无法避免)这个时候遵循的原则就是,看是否应该让调用者来感知这个异常，并有能力恢复这个问题，如果是就果断抛出异常。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果异常，函数提供者本身可以处理，那么就处理掉，不用再抛给上层。比如接口幂等性的设计，就是处理这种异常。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>mengtnt</name></author><summary type="html">异常和错误，咋一看往往都会以为是一个事情。这里首先要定义下本文异常和错误的概念，以便于可以区分通用的概念。在程序运行中如果发生了问题，但是这个问题如果通过增加相应的程序逻辑可以恢复的叫做异常。如果因为程序逻辑问题引起的不可恢复的异常叫错误，也就是通常所说的程序的BUG。</summary></entry><entry><title type="html">如何写一个状态机</title><link href="https://mengtnt.com/2021/10/01/state-machine.html" rel="alternate" type="text/html" title="如何写一个状态机" /><published>2021-10-01T12:10:23+00:00</published><updated>2021-10-01T12:10:23+00:00</updated><id>https://mengtnt.com/2021/10/01/state-machine</id><content type="html" xml:base="https://mengtnt.com/2021/10/01/state-machine.html">&lt;p&gt;状态机是软件工程中很常见的一种架构。它是记录事物发展阶段的一个常用手段。首先来介绍下状态机的几个概念。(我们拿“管理员登陆后台”作为例子描述这些概念)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;State —— 状态机一般要包含两个以上状态。对于管理员登陆，这里有两个状态：“登录状态和未登录状态”。&lt;/li&gt;
  &lt;li&gt;Event —— 事件就是执行某个操作的触发条件或者口令。对于上面的例子，“点击登录按钮”就是一个事件。&lt;/li&gt;
  &lt;li&gt;Action —— 事件发生以后要执行动作。例如事件是“点击登录按钮”，动作是“登陆中”。编程的时候，一个 Action 一般就对应一个函数。&lt;/li&gt;
  &lt;li&gt;Transition —— 也就是从一个状态变化为另一个状态。例如“登陆成功”就是一个变换。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一个典型的状态机转换过程如下图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/state-machine-1.jpg&quot; alt=&quot;img1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上面简单介绍了状态机的概念，那么在不同的业务领域如何定义这些状态机的概念呢？&lt;/p&gt;

&lt;h2 id=&quot;如何定义状态机的概念&quot;&gt;如何定义状态机的概念&lt;/h2&gt;

&lt;p&gt;在定义状态的过程中，其实就是一个抽象概念的过程。如果了解过逻辑学的都知道，现实生活中我们描述的事物其实都可以抽象为命题。命题本质上就是状态机的State，Event就是命题的条件，Action本质上就是通过命题和条件的推导过程。而Transition就是命题推导完成的结论。所以状态机变化的过程本质上就是一个命题的证明过程。P1(Condition) —&amp;gt; P2&lt;/p&gt;

&lt;p&gt;所以当我们拿到业务的时候，首先要分离出哪些是已知的命题，哪些是条件。而我们就是要通过这些已知命题和条件，推导出结论的过程。&lt;/p&gt;

&lt;p&gt;在定义完状态机的概念后，我们下面看下这些概念的使用原则。&lt;/p&gt;

&lt;h2 id=&quot;state使用规则&quot;&gt;State使用规则&lt;/h2&gt;

&lt;p&gt;State至少会有两种，一种是默认的状态，一种是输出的状态，默认的状态相当于已知的命题，输出的状态相当于要推导的结论。所以很重要的一点是在定义State这种数据类型的时候，要选择对外不可变的类型，一旦出现可变类型的状态说明状态机的推导过程有一定缺陷。&lt;/p&gt;

&lt;p&gt;对于管理员登陆的例子，输出的是登陆和未登录的状态。我们可以这样定义状态。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;unLogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginState&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userLoginState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loginstate&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// state&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;event的规则&quot;&gt;Event的规则&lt;/h2&gt;

&lt;p&gt;Event相当于命题的条件，因为条件往往是用来做推导过程的，并不需求保存在状态机中，所以如果涉及到Event这种变量不要用对外可见的变量。在状态机中，需要存储的往往是推导的结论，表示State的变量会是对外可见的变量。所以在写状态机时，要注意区分哪些是Event用到的变量,哪些是State用到的，便于变量的定义。&lt;/p&gt;

&lt;p&gt;对于管理员登陆的例子，“用户点击登陆按钮”这个Event，这个是状态机触发的条件，从这个条件命题中，我们可以分离出来一个属性变量(User)和一个方法(clickLoginButton)。下面就根据Event规则定义这些条件。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;unLogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginState&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Event条件使用的变量，尽量不要做对外暴露&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userLoginState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loginstate&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// state&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 状态机的触发事件，往往是需要外界来调用的，这里用一个函数来表示，有时候可以用一个变量来表示。&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;clickLoginButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// event check and read data&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwork&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;action的规则&quot;&gt;Action的规则&lt;/h2&gt;

&lt;p&gt;Action就是我们推导的过程了。Action大多是无副作用的函数。何为无副作用的函数，简单的讲就是不会操作任何全局变量的函数，因为Action仅仅是计算的过程，还没有涉及到最终的结果命题的生成。另外由于状态机往往是对某一个事物时间周期内的计算，所以Action尽量用函数闭合的操作。什么是闭合操作，就是函数输入的数据类型和输出的数据类型尽量保证一直，这样在命题的推导过程中，就避免了类型的转换。&lt;/p&gt;

&lt;p&gt;对于上面的例子，“登陆行为”这个Action如何合理的表示，首先我们拿到了状态机的触发条件，同时要操作的Event的条件数据是UserInfo。根据上面的原则就很容易定义Action的操作。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;unLogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginState&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userLoginState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loginstate&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// state&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;clickLoginButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// event check and read data&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwork&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// action&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// some request&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;loginRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            
        &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 这个就相当于做了闭合操作，使用的函数参数和返回的参数一致，这里要注意的一点user尽量不可变的变量进行传递防止中间状态出现。&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loginRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//request&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;transition的规则&quot;&gt;Transition的规则&lt;/h2&gt;

&lt;p&gt;Transition是和Action相反的，是有副作用的函数，因为Transition就是生成我们需要推导的命题，所以必然会操作全局的State。在定义有副作用的函数时，我们尤其要小心，尽量用最小化原则，避免一些其他变量的关联操作。这里还有个原则在生产最终的State时，可能会有很多中间状态，中间状态尤其不能对外开放，一定是在内部使用，否则状态机很容易在计算的过程中，中间状态被外部改掉，造成状态机错乱。&lt;/p&gt;

&lt;p&gt;我们再来看管理员登陆的例子，用户在登陆过程中可能会产生那些有副作用的函数和中间状态。显而易见户登陆成功后的操作函数应该是会改变loginstate。另外在登录过程中，为了防止频繁的请求，对正在登录的重复请求做拦截，这个就相当于产生了一个中间状态，使用这个中间状态尤其要小心，因为这会造成我们原本没有副作用的Action的函数，产生了副作用。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;unLogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginState&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userLoginState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loginstate&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// state&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isLogining&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 中间状态，不要对外暴露只是内部使用&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;clickLoginButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// event check and read data&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwork&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// action&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;islogining&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;islogining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;YES&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// some request&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;loginRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;islogining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NO&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;transitionState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 这个就相当于做了闭合操作，使用的函数参数和返回的参数一致，这里要注意的一点user尽量不可变的变量进行传递防止中间状态出现。&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loginRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//request&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 有副作用的函数，尽量用最小化原则，所以islogining这种中间状态不要写到这个函数里。&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transitionState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isSuccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Transition&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loginstate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isSuccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;login:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unlogin&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;从上面分析状态机的过程中，可以看出来任何的数据结构和算法其实都是逻辑推导的过程，还是文章开头表示的这个公式P1(Condition) —&amp;gt; P2，所以本质上首先要确定哪些是已知的命题，哪些是条件，哪些是结论，从而形成我们的推导过程。&lt;/p&gt;

&lt;p&gt;状态机描述起来其实是一个很简单的数据结构和算法，在推导的过程中，我们引入了程序设计中常用的原则，控制了推导过程的边界，本质上是让状态机推导代码更加内聚，不要暴露过多的细节给外部环境，这样的状态机才能更加稳定的运行。&lt;/p&gt;</content><author><name>mengtnt</name></author><summary type="html">状态机是软件工程中很常见的一种架构。它是记录事物发展阶段的一个常用手段。首先来介绍下状态机的几个概念。(我们拿“管理员登陆后台”作为例子描述这些概念)</summary></entry><entry><title type="html">写代码要讲武德</title><link href="https://mengtnt.com/2021/08/09/soft-complex.html" rel="alternate" type="text/html" title="写代码要讲武德" /><published>2021-08-09T02:40:18+00:00</published><updated>2021-08-09T02:40:18+00:00</updated><id>https://mengtnt.com/2021/08/09/soft-complex</id><content type="html" xml:base="https://mengtnt.com/2021/08/09/soft-complex.html">&lt;p&gt;最近刚做完一个项目，闲了下来。想分享下关于软件复杂度的一些思考。这里先说下文章标题的由来，一个软件产品对于用户来讲，好看好用是必须的，其次就是看这个软件的性能好不好，不要老是卡和崩溃。如果满足这两点，往往这个软件口碑不会差。所以对于开发人员来讲，写代码时一定要关注产品的体验和性能。&lt;/p&gt;

&lt;p&gt;对于一个软件产品就跟一个人一样。这个人长的好不好看、脑子聪不聪明确实很重要。所以很多时候我们看一个人，往往比较关注他的外表和智力。那么对比于软件开发，程序员们也是很重视代码的实现和性能，所以你可以看到大量讨论实现和算法的文章。可是这里所说的“德”就往往很容易被忽略。&lt;/p&gt;

&lt;p&gt;那何为“德”，说的直接一点就是约束自己，方便别人。为什么要做这种吃力不讨好的事情呢？是因为道德放在一个长线来看，是对大家都有好处的，否则大家只做利己的行为这个社会可能会乱成一锅粥。那么对于写代码要讲武德，也就是我们在实现一个功能时，尽量让后面接手的人容易看懂，而不要仅仅是实现了功能和用了牛逼的算法优化了性能，也关注下这个“德”，就跟人一样要德智体全面发展。对于写代码来说这个“德”如何做呢？下面我们就来看软件复杂度的管理。&lt;/p&gt;

&lt;h2 id=&quot;软件复杂度&quot;&gt;软件复杂度&lt;/h2&gt;

&lt;p&gt;人的大脑本质上是线性的，我们很难处理多线程的东西，也就是一心很难二用。所以降低软件复杂度，本质上就是减少分支。我们经常会谈论架构，其实好的架构就是减少程序的分支，让程序尽可能朝着线性的方向发展。&lt;/p&gt;

&lt;p&gt;软件复杂度在软件工程中有一个著名的判定方法McCabe环路。如果一段源码中不包含分支决策点，那么这段代码的圈复杂度为1，因为这段代码中只会有一条路径是线性的，如果这段代码包含了一个分支决策点，那么这段代码圈复杂度为2，以此类推。&lt;/p&gt;

&lt;p&gt;McCabe环路有一个很简洁的公式: V(G)=e-n+2。其中e就是下图中变数，n就是节点数。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/soft-complex-1.jpg&quot; alt=&quot;图1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以计算出上图的软件复杂度为7-6+2=3，从图中可以看出有C1、C2、C3三个区域。下面列出软件复杂度计算的三个方法。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;流图中的区域数等于环形复杂度。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;流图G的环形复杂度V(G)=E-N+2，其中，E是流图中边的条数，N是结点数。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;流图G的环形复杂度V(G)=P+1，其中，P是流图中判定结点的数目。P为出度大于2的。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;从上面的公式中，这让我想起来看过的一本书《重构——复杂世界的简单的法则》，所有复杂的东西其实都是由一个最简单的公式，不停的分形迭代造成的。程序的世界尤其适用，所有的复杂性基本都是由if else的分支造成的。所以减少这些环，让我们的程序变的很线性，就是降低软件复杂度的基本原则。&lt;/p&gt;

&lt;p&gt;基于上面的简单法则，软件工程发展出来了各种设计模式和架构。这些年流行的函数式编程，其实本质上也是最大限度的让程序阅读起来是线性的，不要出现太多的分支。下面基于日常经常写的代码，展现下如何处理软件的复杂度。&lt;/p&gt;

&lt;h2 id=&quot;如何降低软件复杂度&quot;&gt;如何降低软件复杂度&lt;/h2&gt;

&lt;p&gt;下面我用伪代码来演示下，平时经常遇到的一些业务代码问题。业务代码的逻辑很简单就是一位厨师制作食物。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cooker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Food&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Food&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;food&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Food&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;food&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Food&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Food&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;food&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cooker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cooker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;food&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cooker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I get {food}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从上面的代码可以清晰的看出，依赖关系很简单Cooker依赖了Food这个对象。这时候产品突然要新增一个需求，说厨师制作的食物完成时，要给厨师的经验提升。如果不假思索，下面的代码实现是最直接的做法。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cooker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Food&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Food&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;food&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Food&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;food&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;food&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Food&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addExp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Food&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Cooker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentCooker&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Food&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;food&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cooker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cooker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;currentCooker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cooker&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 制作过程&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 制作完成&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;currentCooker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addExp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cooker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cooker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;food&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cooker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I get {food}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们分析下这个需求变更后的复杂度变化。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/soft-complex-2.jpg&quot; alt=&quot;图2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图中可以直观的看出复杂度从1变成了2，其实多思考下这个需求，是否可以降低复杂度那？通过回调或者代理的方式就很容易的降低复杂度，代码如下:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cooker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Coffee&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;food&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Food&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;food&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;expCallback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myCoffee&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Food&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(*&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ExpCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expCallback&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;Food&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;food&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ExpCallback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 制作过程&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 制作完成&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;expCallBack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cooker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cooker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;food&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cooker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I get {food}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的代码时通过回调的方式解耦，这样Food的类不再依赖Cooker了，就解除了依赖的环，降低了软件的复杂度。如果需要大量的这种回调，其实就可以新建一个类，把回调的方法抽象出来如下.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Observer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(*&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CallBack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;Observer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Observer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CallBack&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cooker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Coffee&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;observer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Observer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;food&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Food&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;observer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;food&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Food&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Observer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foodObserver&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Food&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;food&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Observer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;observer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;foodObserver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;observer&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 制作过程&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 制作完成&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;foodObserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cooker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cooker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;food&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cooker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I get {food}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的代码就是观察者模式的典型应用场景，其实不同的编程语言可以根据各自的特点实现观察者模式，例如c++常用模板类实现，而Java经常会抽象类来实现。不管如何实现本质上，都是通过抽象出通用的方法，从而使业务的依赖性降低，来减少软件的复杂度。&lt;/p&gt;

&lt;h2 id=&quot;软件复杂度的原则&quot;&gt;软件复杂度的原则&lt;/h2&gt;

&lt;p&gt;从上面的例子中可以看到，当我们在降低软件复杂度的过程中，就诞生了设计模式。下面就再拿设计模式中经典的策略模式举个例子，来说明一下降低软件复杂度常用的一些原则。业务中根据不同的条件执行不同的行为，这种场景再平常不过了。当业务在不停的迭代时，会产生这样的需求例如:”当处理业务A时，需要处理业务B。慢慢的又增加了另一个需求处理业务B时，又要处理业务C。”然后最终的业务代码可能就如下:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BusinessA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BusinessB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BusinessC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BusinessD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BusinessB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BusinessC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BusinessD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BusinessC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BusinessB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BusinessD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BusinessD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;handler business&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;BusinessA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BusinessA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面这种代码就是在若干次业务迭代后，形成了这样的逻辑，我们画下这个业务的流程图如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/soft-complex-3.jpg&quot; alt=&quot;图2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看出这种业务的复杂度理解起来非常的困难。下面经过策略模式改造过的代码。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BusinessA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;handler business A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BusinessB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;handler business B&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BusinessC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;handler business C&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BusinessD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;handler business D&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BusinessA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BusinessB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hanlder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BusinessA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BusinessC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hanlder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BusinessA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BusinessD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hanlder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;handler business&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Strategy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Strategy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再画出上面代码的业务流程图，可以明显的看出来，采用树形的结构复杂度降低了很多。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/soft-complex-4.jpg&quot; alt=&quot;图4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过上面的这个例子，可以看出减少各个模块的反向依赖，避免反向环的形成，可以有效的降低软件的复杂度。所以我们组织代码结构的时候，尽量组织为树形结构，避免环形成，尤其反向依赖环的形成。反向依赖环不仅使复杂度增加，同时很容易引起潜在的问题，因为环上任意一处有bug影响的是整个环的代码逻辑。而如果是树形结构只会影响当前树的一个分支。&lt;/p&gt;

&lt;p&gt;软件架构中，经常提到的高内聚，低耦合，以及设计模式中的接口依赖原则，本质上都是更好的分层。分层的逻辑，简单的来讲就是让程序流程变成一个树形结构，更好的解耦依赖。现在大型的软件基本都是按照树形结构进行设计的，像文件系统，进程管理等等。随着现在软件复杂度的提高，各种框架和架构层出不穷，但本质上万变不离其宗，用上面提到的一个简单公式概况，就是如何让V(G)=E-N+2中的V最小，复杂度降到最低。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;有句俗语叫”前人种树后人乘凉”，我们写代码讲武德就是要养成这种美德。每当写下if else或者增加一个全局变量的时候，就得思考下，有没有更好的方法减少这个分支和变量。当我们在设计业务逻辑，一旦出现了环状结构时，就得思考下，是不是分层做的不合理。所以好的代码不仅仅是算法性能一流，也应该是一眼可以看懂的代码，只有这样的代码才能持续的传承下来，才能让后人站在你的肩膀上走的更远。&lt;/p&gt;</content><author><name>mengtnt</name></author><summary type="html">最近刚做完一个项目，闲了下来。想分享下关于软件复杂度的一些思考。这里先说下文章标题的由来，一个软件产品对于用户来讲，好看好用是必须的，其次就是看这个软件的性能好不好，不要老是卡和崩溃。如果满足这两点，往往这个软件口碑不会差。所以对于开发人员来讲，写代码时一定要关注产品的体验和性能。</summary></entry><entry><title type="html">经验的成本</title><link href="https://mengtnt.com/2021/06/13/exp-cost.html" rel="alternate" type="text/html" title="经验的成本" /><published>2021-06-13T08:51:35+00:00</published><updated>2021-06-13T08:51:35+00:00</updated><id>https://mengtnt.com/2021/06/13/exp-cost</id><content type="html" xml:base="https://mengtnt.com/2021/06/13/exp-cost.html">&lt;p&gt;最近想对博客的源码做自动化的CI，原本想着使用github的workflow配置，提交博客源码后让github自动编译发布博客。不过由于还要部署一些其他的内容，所以索性就想着自己写个github的webhook，当提交博客源码时，服务器运行CI工具，顺便发布下自己部署的其他服务。&lt;/p&gt;

&lt;p&gt;做这个事情本身并不难，其实只要在github上把博客源码的仓库，增加一个webhook，然后服务器后台部署自己的CI工具就行了。在做这个事情之前，突然想到，自己一直从事的是客户端的开发。服务器部署的经验比较少，做这个事情大概要花多久时间哪？然后就尝试从网上看一些教程和文章，从网上一些描述来讲，做这个事情可能只需要花费1到2个小时的时间。然后在做这个事情的过程中，我就记录了解决整个问题的过程和时间。对比下花费的时间和精力。下面我就逐个描述下当时解决问题的过程。&lt;/p&gt;

&lt;h2 id=&quot;docker环境&quot;&gt;Docker环境&lt;/h2&gt;

&lt;p&gt;部署服务自然少不了使用Docker。然后自己就根据博客使用的环境开始写DockerFile了。因为博客用的jekyll框架，自然需要ruby的环境。凭借自己之前仅记的一些Docker知识，自然的写了下面这行代码&lt;code class=&quot;highlighter-rouge&quot;&gt;FROM ruby:2.7.0&lt;/code&gt;,然后又想着还需要node环境，然后DockerFile代码就变成这样子了。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
FROM ruby:2.7.0
FROM node:latest

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果了解Docker工作原理的自然就懂了，跟在FROM后面所有的指令，都是在FROM这层镜像环境上做的。所以当DockerFile执行到 &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN bundle install&lt;/code&gt;时候，就报错说没有找到bundle命令。最开始自己还没有意识到时这个错误，然后就开始查找Docker下ruby环境的相关错误，然后本地写了DockerFile增加如下代码:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
FROM ruby:2.7.0
RUN &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /home/blogsource
WORKDIR /home/blogsource
COPY &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; /home/blogsource
RUN bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;发现都是正确的，然后对比源码才发现可能是FROM指令的问题，然后仔细查询了FROM指令用法，发现Docker17.05老的版本只支持一条FROM指令，新的Docker版本支持多条。但是Docker只会部署最后一条FROM指令的环境。下面就引用下网上的Docker学习的一些资料.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;多个 FROM 指令并不是为了生成多根的层关系，最后生成的镜像，仍以最后一条 FROM 为准，之前的 FROM 会被抛弃，那么之前的FROM 又有什么意义呢？每一条 FROM 指令都是一个构建阶段，多条 FROM 就是多阶段构建，虽然最后生成的镜像只能是最后一个阶段的结果，但是，能够将前置阶段中的文件拷贝到后边的阶段中，这就是多阶段构建的最大意义。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这是我犯的第一个错误，等我解决完这个问题，大概消耗了1个多小时的时间。(PS 由于自己服务器带宽比较小，每次运行Docker拉取镜像时间很久大概要10分钟，也是浪费时间的一个原因)。&lt;/p&gt;

&lt;h2 id=&quot;cmd命令的使用&quot;&gt;CMD命令的使用&lt;/h2&gt;

&lt;p&gt;开心的解决完第一个问题，然后又开始了编译Docker镜像。其实我心里早有准备不可能有这么顺利的，果然控制台又开始报错了，看下我写的DockerFile.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
FROM ruby:2.7.0
RUN &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /home/blogsource
WORKDIR /home/blogsource
COPY &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; /home/blogsource
RUN bundle &lt;span class=&quot;nb&quot;&gt;install
&lt;/span&gt;CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cd&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;_nodejs/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

RUN curl &lt;span class=&quot;nt&quot;&gt;-sL&lt;/span&gt; https://deb.nodesource.com/setup_14.x | bash -&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-qq&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-install-recommends&lt;/span&gt; nodejs &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这是我犯的第二个错误，想当然的以为CMD命令就可以把工作目录转到nodejs的文件夹中，然后安装node环境。环境安装完后运行&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt; 就报错说找不到package文件。然后当时就想，是不是CMD命令的问题就用了下面的方法重新试了下。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
RUN curl &lt;span class=&quot;nt&quot;&gt;-sL&lt;/span&gt; https://deb.nodesource.com/setup_14.x | bash -&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-qq&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-install-recommends&lt;/span&gt; nodejs &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ./_nodejs/ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;发现这样子安装就没有问题了，然后就查询了下CMD和RUN命令的用法，下面的差异就是关键点。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;CMD 指令：类似于 RUN 指令，用于运行程序，但二者运行的时间点不同；CMD 在docker run 时运行，而非docker build;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看到这里就明白了，在安装环境的时候用RUN指令，而真正运行容器的时候采用CMD，这两点的差别就造成了这个问题。还好这个问题也就浪费了半小时的时间。接下来看下个问题吧。&lt;/p&gt;

&lt;h2 id=&quot;docker运行问题&quot;&gt;Docker运行问题&lt;/h2&gt;

&lt;p&gt;终于编译Docker文件没有问题了，但是发现Docker容器只要运行就退出一直显示 &lt;code class=&quot;highlighter-rouge&quot;&gt;exit(0)&lt;/code&gt;。当时着实没有了思路，感觉编译的过程都正确为啥运行不了那。就通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker exec&lt;/code&gt;进入到容器中，执行&lt;code class=&quot;highlighter-rouge&quot;&gt;nmp start&lt;/code&gt;发现没有问题啊。于是开始查找下了docker退出的原因，关键字自然是exit(0),然后很快找到了下面的答案.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;之前介绍容器的时候曾经说过，Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。CMD 指令就是用于指定默认的容器主进程的启动命令的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看到这里自己就有点明白了，查看了下自己写的DockerFile的脚本代码，&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD [&quot;nohup&quot;,&quot;npm&quot;,&quot;start&quot;]&lt;/code&gt;发现为了让node在后台运行，自己特意加了nohup，反而是弄巧成拙，造成Docker容器运行完就自动退出了。&lt;/p&gt;

&lt;p&gt;其实解决这个问题花了自己蛮久的时间，一直把Docker当成了虚拟机的概念在想这个逻辑，Docker本质上还是一个进程，只是使用了linux用户定义分组的能力，如果知道这个前提就不容易犯错了。这看起来和苹果的沙盒原理有异曲同工之妙，也正是这个错误的认知，自己决定之后一定要看下Docker源码的逻辑，了解下Docker设计的思路。&lt;/p&gt;

&lt;h2 id=&quot;git配置问题&quot;&gt;Git配置问题&lt;/h2&gt;

&lt;p&gt;前面的三个问题，其实已经花了自己咖啡馆一下午的时间了。然后编译运行Docker，发现没有问题了。就去github，打开了webhook的设置，配置上去后，按照文档把nodejs的代码写好了，逻辑很简单如下:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;commits&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;receive success start publish...&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;cd .. &amp;amp;&amp;amp; git pull origin master &amp;amp;&amp;amp; ./publish.sh&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;publish successful&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;child_process&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;stdout:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;stderr:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;error:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后就提交了下github的源码，看了下Docker运行的日志，发现git没有权限的报错，然后自己想了下，Docker是按照group用户的概念隔离进程的，那自然不能重用服务器上的sshkey了，那在Docker镜像build的时候应该把sshkey文件复制进去，至此完整的DockerFile代码就如下:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM ruby:2.7.0
USER root

&lt;span class=&quot;c&quot;&gt;#在image中创建文件夹&lt;/span&gt;
RUN &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /home/blogsource
&lt;span class=&quot;c&quot;&gt;# 将工程下所有文件拷贝到文件夹中&lt;/span&gt;
COPY &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; /home/blogsource

&lt;span class=&quot;c&quot;&gt;#使用RUN命令执行npm install安装工程依赖库&lt;/span&gt;
SHELL &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/bin/bash&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;-o&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;pipefail&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;-c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
RUN bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; curl &lt;span class=&quot;nt&quot;&gt;-sL&lt;/span&gt; https://deb.nodesource.com/setup_14.x | bash -&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get update &lt;span class=&quot;nt&quot;&gt;-qq&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-qq&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-install-recommends&lt;/span&gt; nodejs &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get clean &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ./_nodejs/ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; /root/.ssh &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; ./gitconfig/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /root/.ssh/ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.email &lt;span class=&quot;s2&quot;&gt;&quot;animeng68@gmail.com&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.name &lt;span class=&quot;s2&quot;&gt;&quot;mengtnt&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#暴露给主机的端口号&lt;/span&gt;
EXPOSE 9999
&lt;span class=&quot;c&quot;&gt;#执行npm start命令，启动Node工程&lt;/span&gt;
WORKDIR /home/blogsource/_nodejs
CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;npm&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;自此终于把博客自动化ci的工具搭建成功了，自己记录了下时间大概花了8小时左右才完成。我相信如果是一个Docker运维很有经验的人，搞这些源码，可能只需要1到2个小时就能部署和调试完成，我这里很多时间都是浪费在解决问题上了。这本质上就是经验的成本。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;所以何为经验，就是在某个领域解决问题的效率。拿上面的例子，如果是一个经验不丰富的人，可能要花费3倍于经验丰富的人，才能解决这个问题，这个就是生产效率的问题。试问企业更愿意雇佣那种人，显而易见如果企业用1个月就可以赚到3个月的钱时，就愿意拿3倍工资招聘一个经验丰富的人，而不会用平均的工资水平招聘一个经验不足的人。&lt;/p&gt;

&lt;p&gt;对于企业来讲，生产效率是他们立于不败之地的重要手段。很多工具的发明也正是为了提升生产效率。所以作为打工人的我们要考虑，为什么企业要用你，自己的价值何在？工作的时候，一些重复的劳动，就要想有没有什么办法可以做自动化。这不仅节省了企业的成本，重要的是也让自己学到了经验，那将来其他公司也很乐于雇佣你，因为你帮企业提高了生产力，企业就更乐意拿高于没经验人的工资来聘用你。所以在职场上，要不断的增加自己解决问题的经验，然后树立自己的核心竞争力，这样才能立于不败之地。&lt;/p&gt;</content><author><name>mengtnt</name></author><summary type="html">最近想对博客的源码做自动化的CI，原本想着使用github的workflow配置，提交博客源码后让github自动编译发布博客。不过由于还要部署一些其他的内容，所以索性就想着自己写个github的webhook，当提交博客源码时，服务器运行CI工具，顺便发布下自己部署的其他服务。</summary></entry><entry><title type="html">好文章与坏文章</title><link href="https://mengtnt.com/2021/05/03/recoginze.html" rel="alternate" type="text/html" title="好文章与坏文章" /><published>2021-05-03T08:05:10+00:00</published><updated>2021-05-03T08:05:10+00:00</updated><id>https://mengtnt.com/2021/05/03/recoginze</id><content type="html" xml:base="https://mengtnt.com/2021/05/03/recoginze.html">&lt;p&gt;看到这个标题，不要误解。我并不是为了给文章打一个非好及坏标签，我也没这个能力打标签。这里先说下本文说的文章的范围，主要是针对技术领域的内容。所以这里的好文章，更精确的定义应该是让想要学习这个领域的人，能够更容易理解的文章。不过初学者不容易理解的文章就是坏文章么？那当然不是，但是针对于这个人群来说，这类文章的价值意义肯定比不过”好文章”。&lt;/p&gt;

&lt;p&gt;技术类的文章和书籍自己阅读过不少，下面就谈谈关于”好文章和坏文章”的几点心得和看法。&lt;/p&gt;

&lt;h2 id=&quot;有自己的观点不要人云亦云&quot;&gt;有自己的观点，不要人云亦云&lt;/h2&gt;

&lt;p&gt;我经常会看到，有一些技术文章来教大家的安装过程。并不是说这类文章没有意义，而是说这类文章和技术文档其实没什么大的区别。如果能在介绍安装步骤的过程中，讲解下为何要这样安装其实就很有意义了，而不是简单的记流水账。&lt;/p&gt;

&lt;p&gt;还有一类文章，就是翻译的文章，往往容易出现坏文章。因为译者的话毕竟不是作者，一些观点理解难免有误差。再加上如果这个领域不了解的话，就会更加的糟糕。相信你一定读过翻译很烂的技术文章。我下面举一个例子。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is an opaque data type and use xxx api accessed directly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;很多技术文章的翻译是，”这是一种不透明的数据类型，使用xxx来访问”。&lt;code class=&quot;highlighter-rouge&quot;&gt;transparent or opaque type&lt;/code&gt;这两个词在英语中形容一些实物挺形象，但是翻译出来，如果译者不加思考的直译的话，对初学者来讲真的很难理解。如果能补充一句说，”这是一种不透明的数据类型，也就是具体的数据结构没有公开方法，只能通过xxx api来访问”。这种就好理解多了。所以如果翻译的文章，没有吃透作者表达的原理，就很容易人云亦云，照着字面意思翻译。&lt;/p&gt;

&lt;h2 id=&quot;不需要整的高大上简单就好&quot;&gt;不需要整的高大上，简单就好&lt;/h2&gt;

&lt;p&gt;有些技术博客，特别是讲架构的技术博客。上来就是&lt;code class=&quot;highlighter-rouge&quot;&gt;kafka dubbo zookeeper&lt;/code&gt;各种新概念。然后复杂无比的架构图一展示，然后使用各种专业名词解释&lt;code class=&quot;highlighter-rouge&quot;&gt;xxxRPC&lt;/code&gt;进行模块间通信，相信这类文章也会遇到不少。这类文章我想说的是，到底是讲给谁听的，如果是讲给想了解这个领域的人听的，别人可能看了几个名词后，就会去搜索这个名词了，然后也不见得会回来再读。讲给这个领域的专家，可能看了开头也不会读下去，不知道到底要表达什么。&lt;/p&gt;

&lt;p&gt;所以写技术文章一定要有个核心，比如讲某个架构是要解决什么问题，可以把问题先定义清楚。因为问题往往比较简答，比如说用户量过大，单台服务器无法满足要求，想动态扩展。然后再来讲架构，讲架构的时候特别遇到一些新的名词时，如果能表述下这个新事物的来龙去脉，发展历程那就很容易吸引读者。&lt;/p&gt;

&lt;p&gt;技术文章不需要一下子讲完所有的东西，只要抓住一个点讲解清楚就完成了任务，因为一个人看一篇文章往往也不会理解太多的东西。所以文章不在于多，在与精简。&lt;/p&gt;

&lt;h2 id=&quot;能够融会贯通的一定是好文章&quot;&gt;能够融会贯通的，一定是好文章&lt;/h2&gt;

&lt;p&gt;什么是融会贯通，就是能把一个复杂的东西，通过一些身边常见的例子，很简单的表述出来了，这就叫融会贯通。很多作者在讲解一个技术点时，自己确实理解的也很透彻，但是讲给别人听的时候，就复杂无比，别人听的云里雾里，这其中就没有把握讲解的核心”大道至简”。&lt;/p&gt;

&lt;p&gt;我这里想吐槽的是很多数学类的书籍，尤其教科书简直就是劝退的书籍。举个线性代数的例子，一上来就把矩阵的式子列出来，然后各种变换的方法讲解起来。上大学的时候读这种书时，我就怀疑人生了，这到底是要干嘛，学这些有什么用。可是当我读到一本叫《漫画傅里叶变换》这本书的时候，书中一开始并没有解释数学公式，而是从两个音乐系的学生在争论一些乐器的声音开始，然后逐步解释了傅里叶变换公式的推导。当时我读完的时候，真是茅厕顿开，解答了困惑自己很多的问题，也明白了这些数学公式到底有什么用。&lt;/p&gt;

&lt;p&gt;所以数学其实很多公式都是很有趣的，设计的非常精妙。只是我们讲解的时候，都是死板的按照公式来的，根本没有结合实际应用融会贯通。造成很多概念极其抽象，完全没有现实中类比的对象。&lt;/p&gt;

&lt;h2 id=&quot;能够讲故事的一定也是好文章&quot;&gt;能够讲故事的，一定也是好文章&lt;/h2&gt;

&lt;p&gt;自己曾经读到过一篇公众号的文章《我是一个线程》。通过讲解一个人在工厂里工作的经历，描述了一个线程的创建，运行和销毁。我感觉讲的非常的好。通过类比我们身边常见的故事，讲解一些晦涩的技术感念，非常的巧妙。对于初学者来讲，通过这种类比，就很容易理解。&lt;/p&gt;

&lt;p&gt;最近也看了《我是一个线程》作者出的《码农翻身》这本书，自己也在学习作者的讲解方法。尤其书中通过漫画和实例相结合的方式，讲解的非常的生动。这类文章就是通过一些有趣的故事，然后就把一个技术点的来龙去脉分析的非常透彻。并且故事和技术点的结合也非常的贴切，这其实需要作者大量的思考才能总结出来这些方法。所以好的文章，不仅需要你理解这个技术点，同时也要很好的能讲解这个技术点。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;个人觉得进入一个行业的门槛，跟这个行业的教育水平有很大的关系。其实我觉得IT行业就挺好，有大量高质量的文章和资料输出。只有这样的文章多起来，才能更好的让初学者进入这一行。我在想例如数学和物理一些理论学科，如果能有更多高质量和有趣的讲解，相信这两门学科比我们想象的有趣多了。&lt;/p&gt;</content><author><name>mengtnt</name></author><summary type="html">看到这个标题，不要误解。我并不是为了给文章打一个非好及坏标签，我也没这个能力打标签。这里先说下本文说的文章的范围，主要是针对技术领域的内容。所以这里的好文章，更精确的定义应该是让想要学习这个领域的人，能够更容易理解的文章。不过初学者不容易理解的文章就是坏文章么？那当然不是，但是针对于这个人群来说，这类文章的价值意义肯定比不过”好文章”。</summary></entry><entry><title type="html">深入解析OSX和iOS读后感</title><link href="https://mengtnt.com/2021/03/13/read-bsd.html" rel="alternate" type="text/html" title="深入解析OSX和iOS读后感" /><published>2021-03-13T08:53:28+00:00</published><updated>2021-03-13T08:53:28+00:00</updated><id>https://mengtnt.com/2021/03/13/read-bsd</id><content type="html" xml:base="https://mengtnt.com/2021/03/13/read-bsd.html">&lt;p&gt;自己做了这么久苹果应用的开发，其实还没有认真的看过苹果系统的整个架构。最近看了“深入解析Mac OS X &amp;amp; iOS操作系统”这本书，也算是对自己之前工作的回顾。如果你已经在这个领域从事了很多年，然后再看这个领域的一些基础的理论知识，和你要学习一门新技术而看这方面的书籍，感受是完全不同的。往往我看一些新技术的书籍时，遇到介绍的新知识点，内心的OS：“不过如此么？不就是xx技术加了一个美丽的外壳么？换汤不换药“。而看你一直从事的工作的书籍时，自己的感受是：”原来这个技术点设计的这么美妙啊，自己用了这么多年这个技术，都没理解这个精髓，真是惭愧啊“。内心有种老友重逢的感觉，有很多话想说，所以自己暂且就把读这本书的一些心得写了下来。下面介绍下自己看到的几个技术点的一些感想。&lt;/p&gt;

&lt;h2 id=&quot;达尔文进化史&quot;&gt;达尔文进化史&lt;/h2&gt;

&lt;p&gt;看到这个标题，不要误解并不是讲解进化论，而是想回顾下苹果系统从诞生到现在的历程。因为之前经常听说Darwin是苹果系统内核,其实从来没深究过Darwin是从何而来的，之前只是知道”UNIX”、”XNU”、”FreeBSD”但是他们之间又有什么千丝万缕的联系，从来没关心过。从这本书里得知他们之间的历史还是很有趣的，我这里挑几个关键点介绍下。&lt;/p&gt;

&lt;p&gt;大名鼎鼎的UNIX内核大家应该都知道，是现代操作系统的鼻祖，1960年左右计算机刚诞生时，为了大家可以共享这个庞然大物，美国电信公司(AT&amp;amp;T)旗下的贝尔实验室研发了一套使用计算机硬件的多任务处理的复杂系统(Uniplexed Information and Computing Service，UnICS)，简称叫做UNIX，里面两个大名鼎鼎的工程师叫做肯·汤普逊和丹尼斯·里奇，这两个人就不多做介绍相信大部人都知道。&lt;/p&gt;

&lt;p&gt;讲到这里自己想说一句，在现代的社会里，任何发明都是科学家的梦想和商业世界博弈的结果，科学追逐梦想，商业追求实用型，一实一虚成就了现代的世界。UNIX刚出现的时候是完全免费的给学术机构和大型企业用，但是随着用户量的增多，AT&amp;amp;T公司意识到这玩意可以赚钱了，就不再把源码授权给企业和学术界用了。并且申请了UNIX这个商标，任何系统都不能再叫做UNIX了，导致有很多这方面的专利官司。&lt;/p&gt;

&lt;p&gt;之后很多机构都不能使用UNIX系统了，不得已人们根据UNIX内核的设计理念，就做出了很多类似的系统。其中加州大学伯利克分校为了学术研究，就开发了一套伯利克套件(BSD)产品，诞生于学术研究的BSD发展很迅速，根据开源协议的不同，BSD出现了FreeBSD，OpenBSD，NetBSD各种版本。&lt;/p&gt;

&lt;p&gt;苹果的Darwin内核就是基于FreeBSD开发出来的，当时很多企业和学术机构，为了避免使用UNIX系统商标被官司缠身，就声明了他们的系统不是Unix，例如苹果就声明自己用的内核是XUN(X not unix),所以Mac系统OSX后面的X也就是从这里由来的。由于苹果的内核其实是开源的BSD发展来的，所以要遵循开源的一些协议，Darwin内核也一直是开源的，只是基于上面开发的软件套件是闭源的。所以苹果系统跟windows系统还是有很大区别的，windows系统的前身是DOS系统，完全是一个闭源的商业化操作系统，没有经历过任何开源的洗礼。&lt;/p&gt;

&lt;p&gt;基于UNIX内核设计的开源系统如雨后春笋的发展起来，但是每个系统都是不同的学术机构和企业开发出来的，商业的社会大家都有各种自己的心思，一不小心就触犯了专利，尤其学术界对此非常的反感。为了自由总会有人站出来的，在1983年9月27日时，理查德·斯托曼在麻省理工学院公开发起一个计划。它的目标是创建一套完全自由的操作系统，称为GNU(G is Not Unix)。&lt;/p&gt;

&lt;p&gt;GNU计划不仅要造出完全自由免费的操作系统，还要基于系统上造出各种免费的软件套件。但是这个计划是很美好，现实很骨感，在没有商业利益的情况下，GNU组织一直没能开发出来一个完全免费的操作系统。直到1991年，林纳斯·托瓦兹编写出了与UNIX内核兼容的Linux操作系统，之后Linux与GNU结合后，一个完全自由的操作系统正式诞生。许多程序员参与了Linux的开发与修改，也经常将Linux当成开发GNU计划软件的平台。但Linux本身不属于GNU计划的一部分。&lt;/p&gt;

&lt;p&gt;据说GNU的Hurd内核现在仍然在开发，还没有发布1.0版本。虽然GNU计划并没有完全的实施完毕，但是开源的计划促进了很多软件的发展，例如shell、mark、vi等一系列开发编辑的软件都是在GNU计划中诞生的。还有大家都知道的Android系统也是基于Linux内核开发的，可以说也是得益GNU计划，同样Android系统也遵循了GNU计划的初衷，所有的内核代码都是开源的。&lt;/p&gt;

&lt;p&gt;说来也惭愧，读了这本书之后，才真正的把目前主流的操作系统的前世今生关联起来，之前只是知其然不知所以然。下面也介绍几个读完此书后，自己经常使用但是不知所以然的几个知识点。&lt;/p&gt;

&lt;h2 id=&quot;魔数&quot;&gt;魔数&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chomod +x&lt;/code&gt;这个操作我们经常使用，都知道这是告诉操作系统改变一个文件成为可执行文件，但是操作系统怎么识别这个文件是可执行文件那？其实过程很简单，就是会给这个文件打上一个标志。告诉操作系统将这个文件读入内存，然后寻找一个头签名。这个头签名就是”魔数(magic)”。每个操作系统都会定义可执行文件的魔数，然后根据不同的魔数正确加载和解析二进制文件，下面列出常用的一些魔数。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;可执行格式&lt;/th&gt;
      &lt;th&gt;魔数&lt;/th&gt;
      &lt;th&gt;用途&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;PE32/PE32+&lt;/td&gt;
      &lt;td&gt;M2&lt;/td&gt;
      &lt;td&gt;window系统的可执行文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ELF&lt;/td&gt;
      &lt;td&gt;\x7FELF&lt;/td&gt;
      &lt;td&gt;Linux和大部分Unix系统的可执行文件，Mac OS不支持&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;脚本&lt;/td&gt;
      &lt;td&gt;#!&lt;/td&gt;
      &lt;td&gt;系统内核会寻找#!之后的文本开始执行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Universal Binary&lt;/td&gt;
      &lt;td&gt;0xcafebabe(小尾顺序) 0xbebafeca(大尾顺序)&lt;/td&gt;
      &lt;td&gt;通用二进制文件 OS X上支持&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Mach-O&lt;/td&gt;
      &lt;td&gt;0xfeedface(32位) 0xfeedfacf(64位)&lt;/td&gt;
      &lt;td&gt;OS X原生二进制文件&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这里我想说的是，自己经常写脚本的时候默认都写 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#! /bin/bash&lt;/span&gt;&lt;/code&gt;，但是很少去深究为啥要带上&lt;code class=&quot;highlighter-rouge&quot;&gt;#!&lt;/code&gt;这个标志。想一想如果当年开发脚本的大师们用了&lt;code class=&quot;highlighter-rouge&quot;&gt;#@&lt;/code&gt;,可能现在的脚本都要带上这个标志了。虽然是个小小的知识点，但是也能考察出自己学习东西的认真程度。&lt;/p&gt;

&lt;h2 id=&quot;沙盒机制&quot;&gt;沙盒机制&lt;/h2&gt;

&lt;p&gt;沙盒机制是苹果很早就具备的能力，尤其是iOS系统，一诞生就有了这个机制，其实在Unix系统下，想实现这个机制还是相对比较容易的，因为Unix系统内核当初开发的时候，就是为了多用户共享使用硬件的资源，共享的前提必须要做好隔离，例如现在的Docker技术就是使用了这个思想，进行容器隔离的。不过苹果使用的方案是不同的，下面就大概了解下苹果系统是怎么完成沙盒机制的。
沙盒机制上面描述起来简单，但是如果内核支持的不好的话，真正的要实现难度还是很大的，因为现在进程的拦截技术很容易打破这些沙盒能力。BSD内核有一层Mac(mandatory access control)层,是专门用来处理沙盒机制的。用户态的进程在访问操作系统资源的时候，会先进入到Mac层,系统会读取entitlement文件，然后决定此进程的权限，从而分配不同的能力。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/read-bsd-system-1.png&quot; alt=&quot;img1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们在开发苹果下的应用时，需要通过我们的证书生成entitlement.plist文件，这个文件苹果在官方文档中介绍的比较少，只是说用来提供进程的可访问的能力，其实本质上是苹果用来做沙盒控制的一个手段。苹果会通过Mac层对进程的代码签名进行检查，只有苹果自己颁发的证书的签名才能通过，然后根据entitlement.plist配置授予相应的权限。所以越狱的话，本质上就是要打破内核的Mac层，从而使用户的进程具备系统的root权限。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;这里想说一个知识点，就是在iOS下改变一个应用程序权限的时候，例如关闭一个应用程序的麦克风权限，这个程序就需要重启。如果你了解上面苹果实现沙盒机制的原理，就很容易理解，因为权限的分配是在加载程序之前就需要决定的，自然必须要重启应用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;内存破坏问题&quot;&gt;内存破坏问题&lt;/h2&gt;

&lt;p&gt;编程问题中，遇到的最多的两类问题就是内存问题和线程问题。如果能很好的解决这两大类问题，基本90%以上的问题都可以解决。下面就基于这本书的介绍，讨论下这内存问题发生时，如何更好的定位。&lt;/p&gt;

&lt;p&gt;内存问题一般包含两类：缓冲区溢出和堆内存破坏。在很多情况下，导致上面崩溃的代码往往相隔甚远，所以从bug出现到程序崩溃往往不在一个时间点，这样就很难定位bug的位置。&lt;/p&gt;

&lt;p&gt;苹果系统为了方便定位这些问题，在&lt;code class=&quot;highlighter-rouge&quot;&gt;malloc&lt;/code&gt;操作的时候，允许开发者设置如下的环境变量，便于定位问题。下面的表格列出mac系统提供的相关的内存检测的环境变量。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/read-bsd-system-2.png&quot; alt=&quot;img1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面介绍下系统的libgmalloc.dylib这个动态库，如何来定位一些内存的bug的。这个库的大致原理就是通过拦截libsystem库的内存分配函数，给分配函数的内存打上不同的标记，从而定位问题。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;给进程分配的每个内存块上加上自定义的数据头，一般包含分配者的函数调用信息，这样当某块内存出问题时方便定位调用堆栈。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;给进程的每个内存块分配一个自己专有的页上，相邻的页面设置为不可写或者不可访问，这样一旦程序出现bug，例如缓存溢出或者访问了相邻的内存页面时，就会出现bad access的信号出现，这样就可以定位问题了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;释放内存块时，解除分配的内存页面的读写权限，这样在过度释放相邻内存块的数据时，同样会引起崩溃的问题。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;通过上述的方法可以方便的定位到，是那行代码破坏了进程中的内存结构，不用等到运行到被破坏的结构时才会崩溃。所以本质上xcode的instrument工具，例如检测内存泄漏，用的都是类似于上述的方法。&lt;/p&gt;

&lt;h2 id=&quot;mach任务概念&quot;&gt;Mach任务概念&lt;/h2&gt;

&lt;p&gt;严格来讲苹果的系统没有标准的线程的概念，他使用的叫做Mach任务，其实这个数据结构可以看做是线程的概念。同时苹果在上层通过Mach任务也实现了linux的POSIX的线程能力。所以在MAC上也是可以使用Unix下标准的线程接口的。不过苹果开发文档还是建议开发者用苹果自己封装的线程队列(GCD)。&lt;/p&gt;

&lt;p&gt;Mach任务是通过消息传递来实现各个任务的通信的，同样异常处理也是通过Mach消息(msg_send)下发的。下面就介绍下mach任务常见的一些异常处理。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define EXC_BAD_ACCESS // 内存访问异常
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define EXC_BAD_INSTRUTION //指令执行异常,非法或者未定义的指令
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define EXC_ARITHMETIC // 算数计算异常
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define EXC_EMULATION // 模拟指令异常
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define EXC_SOFTWARE // 软件产生的异常，0-0xFFFF范围内的代码时给硬件的，0x1000-0x1FFF范围内的代码时给操作系统模拟的
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define EXC_BREAKPOINT // 跟踪或者断点相关的异常
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define EXC_SYSCALL // 系统调用的异常
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define EXC_RPC_ALERT // RPC 报警
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define EXC_CRASH // 异常的系统推出
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上述这些错误都是早期的MAC系统定义的，其实现在还有很多其他错误没有包含进去，比如abort(系统终止)和segment(内存页错误)，都是操作系统通知进程的错误消息，只有充分了解了这些错误都是什么意思，以及如何发生才能更好的定位问题。&lt;/p&gt;

&lt;h2 id=&quot;系统崩溃&quot;&gt;系统崩溃&lt;/h2&gt;

&lt;p&gt;当用户登陆成功时，苹果系统会启动Finder进程而iOS下叫做SpringBoard，这两个都是操作系统的界面GUI。一旦这两个进程崩溃界面的UI就会卡死。&lt;/p&gt;

&lt;p&gt;有意思的是，系统内核崩溃时，各个操作系统展示的默认样式是不同的。Linux喜欢将内容导出在黑白控制台上，windows更喜欢EGA的蓝屏风格，而Mac OS X更喜欢黑灰色的半透明画面，这个就是大家熟悉的死亡灰屏，本质上是调用内部的panic()函数，如果感兴趣的可以下载mac的内核，虚拟机上编译下，然后执行panic函数感受下死亡黑屏。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;这本书对于做苹果开发的人员还是很值得一读，里面涉及的很多底层的知识，虽然平时开发很少用到里面的相关代码，但是对了解整个系统的架构，以及将来定位问题很有作用。当然上面只是介绍了这个书的几个知识点，里面还有大量有趣的知识点例如: 进程的优先级策略、如何实现POSIX标准的&lt;code class=&quot;highlighter-rouge&quot;&gt;poll select&lt;/code&gt;、网络utun接口抽象等等。不过从上面几个点中可以看出这本书传递给读者一些基本的理念，就是在平台上开发应用时，不仅要知其然，也要知其所以然。这样才能更好的写出来健壮的程序。&lt;/p&gt;</content><author><name>mengtnt</name></author><summary type="html">自己做了这么久苹果应用的开发，其实还没有认真的看过苹果系统的整个架构。最近看了“深入解析Mac OS X &amp;amp; iOS操作系统”这本书，也算是对自己之前工作的回顾。如果你已经在这个领域从事了很多年，然后再看这个领域的一些基础的理论知识，和你要学习一门新技术而看这方面的书籍，感受是完全不同的。往往我看一些新技术的书籍时，遇到介绍的新知识点，内心的OS：“不过如此么？不就是xx技术加了一个美丽的外壳么？换汤不换药“。而看你一直从事的工作的书籍时，自己的感受是：”原来这个技术点设计的这么美妙啊，自己用了这么多年这个技术，都没理解这个精髓，真是惭愧啊“。内心有种老友重逢的感觉，有很多话想说，所以自己暂且就把读这本书的一些心得写了下来。下面介绍下自己看到的几个技术点的一些感想。</summary></entry><entry><title type="html">代码重构实践</title><link href="https://mengtnt.com/2021/02/10/rx-refactor.html" rel="alternate" type="text/html" title="代码重构实践" /><published>2021-02-10T07:02:59+00:00</published><updated>2021-02-10T07:02:59+00:00</updated><id>https://mengtnt.com/2021/02/10/rx-refactor</id><content type="html" xml:base="https://mengtnt.com/2021/02/10/rx-refactor.html">&lt;p&gt;  最近因为需求的变更，重构了几个5000多行的大类。完成了之后自然感觉清爽不少。在重构的过程中，自己也在思考，是什么造成了代码需要重构，我曾经重构过的一个类，大概是快6000行代码，类的成员变量有50多个，方法大概也有50个左右。这样的类以后维护起来就容易造成牵一发而动全身，用下图可以形象的表述。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021-02-10-1.jpg&quot; alt=&quot;img1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;臃肿的代码从何而来&quot;&gt;臃肿的代码从何而来&lt;/h2&gt;

&lt;p&gt;  冰冻三尺非一日之寒，我看了下这个类的git记录，有5年多的历史，陆陆续续有几十个人修改过。驱使这个类变的如此大。本质上和过多的业务逻辑增加到了同一个类中有很大关系。这是造成代码臃肿的本质原因，根据自己以往代码的经验来看，下面几种情况极易造成庞大的类出现。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;业务单例类—单例本质上是让代码能更好的重用，但是如果把所有的业务逻辑都放进去，就等于打开了恶魔的盒子，这个单例的类必然会越来越大。比如XXXNetworkCenter这种把业务的所有网络接口放到里面去，这时候大家就容易无脑的不管什么业务都往里面放置，必然会越来越庞大。所以还是要针对不同的业务独立的能拆分出来需要的网路接口最关键。在oc开发中，常见的方式就是扩展NetworkCenter+xxxExtension。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;工具类—我们往往喜欢把所有业务无关的代码抽离出来，放到一个公共的类中，其实这样做对代码的重用有很大的好处的，但是无止境的往工具类中放代码，也会造成代码臃肿的问题。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;过多的类变量和函数—面对有些复杂业务的逻辑，我们习惯上用一些共享的变量，来存储计算的结果，方便其他地方使用，这样做固然是好。但是如果一个类的变量超过了10个，或者提供给外部调用的函数超过了10个，这样对以后代码的可阅读性和维护性极其不利。因为对个人来讲，记忆超过10个物体的改变状态，其实是很难的挑战。所以当你的类一旦扩展到这种程度时，就要想办法通过好的架构缩减这些共享的变量和方法。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;如何消除臃肿的代码&quot;&gt;如何消除臃肿的代码&lt;/h2&gt;

&lt;p&gt;  软件工程中，经常讨论架构，好的架构本质上就是消除臃肿的代码，让代码读起来更容易，修改起来更简单。软件架构重要的原则就是Keep it simple。这句话说出来简单，可是想把复杂的东西变简单并不是那么容易的事情，所以各种设计模式就应运而生。这里我讲几个自己实践过程中常用的几个原则。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;开闭原则，当你设计一个类的时候，尽量完成后不要修改类内部的设计，但是这个类要具备拓展能力，那很多人问，我不修改类的实现怎么来拓展能力哪？这里往往就需要针对相关的业务，有合理的底层通信机制来保证类的拓展性。比如现在操作系统的微内核，就是通过消息传递的方式，来分离系统的各个模块，让你的系统具备拓展能力，同时不用修改内核的代码。其实还有现在的微服务架构，比如RPC服务框架HSF就是通过合理的消息服务机制来分离和拓展各种微服务。当然上面说的都是很庞大的架构，必然实现非常复杂，我在下面的实践代码中，相对来讲分离的方式比较简单，但是麻雀虽小五脏俱全，其中也是可以看出如何分离各个业务模块的代码的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;尽量减少有副作用函数暴露。现在很多架构，都是想要消除函数的副作用，本质上就要是消除引起公共变量改变的函数。所以有副作用的函数尽量放置到内部处理，外部的入口尽量减少。尤其当类有大量可读写的变量暴露时，这时就要考虑架构是否合理了，如果这时不去改变，公共变量将成为你的噩梦。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;多变的模块做隔离，少做依赖、少变的代码，可以多做依赖。这个原则本质上就是业务的分层设计，让频繁变动的业务层代码最好放在最上层，不要有其他类对它做过多的依赖，否则及其容易牵一发而动全身，引起很多问题。所以同一层的业务代码，分离后尽量不要做依赖。分层设计的目的主要是减少类的大小，便于频繁变动的业务代码的修改。想起来看过的驱动领域设计这本书，描述过抽象出业务领域的语言对于系统的架构非常关键。其实本质上业务领域语言，就是那些少变的底层代码分离出来，放在最下层，而把频繁变化的业务放在最上层。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上就是自己常用的几个原则，也不一定准确的对应某种设计模式，因为就像刚才所说的保持简洁才是最终的目的，不能为了设计模式而把代码搞的复杂了。&lt;/p&gt;

&lt;h2 id=&quot;实践操作&quot;&gt;实践操作&lt;/h2&gt;

&lt;p&gt;  简单描述下重构的会议和电话首页的大概模块划分，如下图所示:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021-02-10-2.jpg&quot; alt=&quot;img2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;重构之前所有的UI和业务逻辑都是写在一个类中，造成这个类大概有5000多行代码，从模块图可以看出，应该拆分更多层才合理。根据上面提到的重构的原则，为了解耦，首先我们要找到一个方式来提供各个模块消息的通信。其实通信的方式很多，我这里借鉴了ReactX的信号方式进行通信，类图如下:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021-02-10-3.jpg&quot; alt=&quot;img3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021-02-10-4.jpg&quot; alt=&quot;img4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这样各个模块在上层依赖下层时，通过依赖ColdEvent模块进行调用，ColdEvent通信避免了大量的如下的回调写法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-oc&quot;&gt;- (void)getLatestMessage:(void (^ BOOL)(void ))complete;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;减少了公开的方法调用。并且同层模块不相互依赖，实现了各个模块通信的解耦。&lt;/p&gt;

&lt;p&gt;通过这样解耦的方式，如果将来业务复杂了，需要把MeetingModle要分为voiceMeeting和videoMeeting，就可以把MeetingModel再进行横向扩展。其实本质上也是了保持类的简单，避免大量公开的方法。&lt;/p&gt;

&lt;p&gt;通过上述的方式，同时视图层和逻辑层，我借鉴了VIPER的架构方式，把原有的类，拆出了10个类左右，各个类代码在200行左右，类变量和公开方法也保持在10个左右，这样对于代码的阅读性大大增加，同时对维护以及扩展功来说成本也会小很多。整个重构做完之后的感觉，就向下图所示:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021-02-10-5.jpg&quot; alt=&quot;img5&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;展望和感悟&quot;&gt;展望和感悟&lt;/h2&gt;

&lt;p&gt;  上述的代码在重构的过程中也用到了很多设计模式，我这里想表述的是设计模式不是软件架构的银弹。有时候不能为了使用设计模式而过度设计类，还是之前提过的原则，保持代码简单。比如一些简单的业务功能，把所有逻辑都放到一个类中也只要100多行代码时，这时就不要犹豫写一个类就好。不用过度的设计和架构，因为软件架构的原则就是保持代码简单，避免复杂，这时候再用各种设计就有点画蛇贴足了。&lt;/p&gt;</content><author><name>mengtnt</name></author><summary type="html">  最近因为需求的变更，重构了几个5000多行的大类。完成了之后自然感觉清爽不少。在重构的过程中，自己也在思考，是什么造成了代码需要重构，我曾经重构过的一个类，大概是快6000行代码，类的成员变量有50多个，方法大概也有50个左右。这样的类以后维护起来就容易造成牵一发而动全身，用下图可以形象的表述。</summary></entry><entry><title type="html">SimpleCoreData实践</title><link href="https://mengtnt.com/2020/09/14/coredata-swift.html" rel="alternate" type="text/html" title="SimpleCoreData实践" /><published>2020-09-14T03:51:28+00:00</published><updated>2020-09-14T03:51:28+00:00</updated><id>https://mengtnt.com/2020/09/14/coredata-swift</id><content type="html" xml:base="https://mengtnt.com/2020/09/14/coredata-swift.html">&lt;p&gt;面向协议编程是Swift语言的一个很大的特点，wwdc中有一节经典的Session&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2015/408/&quot;&gt;面向协议编程&lt;/a&gt;对Swift这个语法特性做了详细的分析。下面分享的内容主要是利用Swift面向协议编程特性，封装CoreData数据库的API。至于为何要选择CoreData数据库也是因为Coredata很多API其实对于初学者非常不友好，也是想通过Swift语言的一些优秀特性来简化API的操作，也特意为此起了一个名字叫SimpleCoredata。&lt;/p&gt;

&lt;h2 id=&quot;coredata的基本思想&quot;&gt;CoreData的基本思想&lt;/h2&gt;

&lt;p&gt;CoreData核心思想就是，操控数据库时，避免写繁琐的sql语句，而用更友好的对象操控的方式来使用数据库。CoreData如果你不太了解的话，建议看下苹果的&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreData/index.html#//apple_ref/doc/uid/TP40001075-CH2-SW1&quot;&gt;官方文档&lt;/a&gt;。这篇博客并不会对CoreData进行详细的讲解，我主要是想分享下如何利用Swift语言的一些特性设计合理的API。&lt;/p&gt;

&lt;p&gt;CoreData虽然说可以简化写代码的量，但是也有很多负面问题，比如coredata对象操控造成没办法很好的指定主键，保证数据唯一性时要做一些过多的操作。还有对象模型合并时，需要写大量的合并代码，以及读写性能的问题等等。其实业界对CoreData的吐槽也很多，对于一些大型的项目确实Coredata还是有一些坑存在。&lt;/p&gt;

&lt;p&gt;这几年苹果的开发者大会经常有CoreData的相关Session，也在不停的优化和改善CoreData的体验。如果想使用CoreData数据库作为项目开发，建议最好观看下&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2018/224/&quot;&gt;Core Data Best Practices&lt;/a&gt;这个session，里面的讲解对CoreData优化方面都有详细的解释。之后你看完这篇文章就会发现，其实用CoreData操作数据库存储，可以如此简单，只要几行代码即可，所以你想要做一些小项目使用到数据库时，CoreData还是蛮合适的。&lt;/p&gt;

&lt;p&gt;好了暂时对CoreData的解释就这么多了，下面开始分享下Swift面向协议编程的思想了。&lt;/p&gt;

&lt;h2 id=&quot;swift的面向协议编程&quot;&gt;Swift的面向协议编程&lt;/h2&gt;

&lt;p&gt;首先解释下为什么苹果要提出面向协议编程，其实跟OOP遇到的问题有很大的关系，由于现在很多项目越来越复杂，设计类的继承结构非常的深，造成开发者阅读起来比较困难，并且还经常会出现修改了一个子类的方法，莫名其妙的影响到了其他类的实现。&lt;/p&gt;

&lt;p&gt;在OOP中为了解决此问题使用了很多设计模式。其实设计模式大多是利用组合、代理、装饰来减弱继承过多的问题。设计模式本质上是迫不得已才引入的，虽然很有效但是大家必须要遵守设计模式的规则去实现代码。可是如果大家不遵守这个规则，语言层面也不会报错，就会造成之后代码的可维护性越来越差。为了语言层面上解决这些问题，就出现面向协议编程(POP)。Swift语言也就是顺应了这个潮流。&lt;/p&gt;

&lt;h3 id=&quot;extension用法&quot;&gt;extension用法&lt;/h3&gt;

&lt;p&gt;下面我结合代码来说下Swift的protocol中extension用法是如何避免继承的。先来看下OOP编程中为了重用一个类的方法，往往用如下的写法:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParentClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;learnSwift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;learn swift&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;childClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ParentClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;advanceCourse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;learnSwift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用swift语言protocol协议的extension语法特性，可以扩展一个方法的实现就可以这样写。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParentProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;learnSwift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParentProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;learnSwift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;learn swift&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;childClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ParentProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;advanceCourse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;learnSwift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看出来，代码量有一定增加，但是把&lt;code class=&quot;highlighter-rouge&quot;&gt;learnSwift&lt;/code&gt;作为一个公共的方法定义到接口中，明显比这个方法隐藏在父类中，增加了可读性。下面再来看一段代码。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FatherProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FatherProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MatherProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MatherProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;175&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PersonClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FatherProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MatherProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BMI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BMI index height &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, weight &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从上面的使用可以看出，协议和扩展功能可以解决横向多态问题。如果是OOP编程的话，想把一个父类拆分，往往的做法是父类再增加一个父类，造成继承越来越深。现在利用Swift语言的特性就可以用组合的方式提炼出来公共方法，然后进行横向扩展，代码可读性会大大增加。&lt;/p&gt;

&lt;h3 id=&quot;associatedtype的使用&quot;&gt;associatedtype的使用&lt;/h3&gt;

&lt;p&gt;相对于OOP类对象，接口中往往缺少实例变量的概念。所以类中的实例变量如果需要重用的话，在protocol中应该如何设计哪？这就要利用Swift语法protocol的另一个特性associatedtype。这个就相当于给协议定义了一个公共的实例变量。下面看个例子&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;associatedtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Equatable&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;subscript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个协议是所有集合类都要实现的，因为集合类都要存储实例变量，所以&lt;code class=&quot;highlighter-rouge&quot;&gt;associatedtype Item&lt;/code&gt;就定义了公共的实例变量。然后所有实现的类用模板语法来定义就可以达到重用的目的,例如Stack的定义。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeLast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;subscript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其实associatedtype的很多概念设计到了Swift模板语法的特性，如果要深入了解可以看下&lt;a href=&quot;https://docs.swift.org/swift-book/LanguageGuide/Generics.html&quot;&gt;swift Generics语法&lt;/a&gt;官方文档。&lt;/p&gt;

&lt;h2 id=&quot;simplecoredata实践&quot;&gt;SimpleCoreData实践&lt;/h2&gt;

&lt;p&gt;上面讲了这么多铺垫，下面说下&lt;code class=&quot;highlighter-rouge&quot;&gt;SimpleCoreData&lt;/code&gt;框架的实践，首先看下这个框架的UML类图结构。
&lt;img src=&quot;/images/simple-coredata.jpg&quot; alt=&quot;UML1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从类图里面可以看出来，&lt;code class=&quot;highlighter-rouge&quot;&gt;CoreDataStroage&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;NSManagedObjectContext&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;NSManagedObject&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;CoreDataObservable&lt;/code&gt;这几个类是协议的真正实现，将来如果替换成其他类型的数据库，上层protocol的设计可以不用改变，方便了底层的替换。其实这在OOP中是运用了设计模式的一个重要原则依赖接口，不依赖实现(IOC)。&lt;/p&gt;

&lt;p&gt;这里就简单说下Objective-c语言中实现IOC的方法，往往需要一个容器来记录哪些接口被实现了，因此要定义一个&lt;code class=&quot;highlighter-rouge&quot;&gt;IOCContainer&lt;/code&gt;的共有类，然后通过&lt;code class=&quot;highlighter-rouge&quot;&gt;registorComplement&lt;/code&gt;方法把所有实现对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;Protocol&lt;/code&gt;接口，注册到&lt;code class=&quot;highlighter-rouge&quot;&gt;IOCContainer&lt;/code&gt;中。然后上层代码的调用都使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Protocol&lt;/code&gt;的方法，这样就实现了接口依赖。Objective-c为何用这么麻烦的方法实现，显然是因为语法上不支持这种特性，并且这样实现容易出现的问题是，假如有一些&lt;code class=&quot;highlighter-rouge&quot;&gt;protocol&lt;/code&gt;的实现没有注册到Container中时，这个问题不容易被发现，一旦上层调用就容易崩溃。&lt;/p&gt;

&lt;p&gt;下面看下Swift如何实现这个设计模式的，这里可能要用到Swift一个新的语法&lt;a href=&quot;https://docs.swift.org/swift-book/LanguageGuide/OpaqueTypes.html&quot;&gt;OpaqueTypes&lt;/a&gt;。这个是通用类型定义，具体我们看下面的代码。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CustomStringConvertible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Equatable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;storePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CoreDataStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Storage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;storeFileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mainContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;objectModelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// todo&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mainContext&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;storePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fileURLWithPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;documentsDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;appendingPathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storeFileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;openDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;objectModelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dbName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Storage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DBFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;synchronized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CoreDataStorage&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CoreDataStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;objectModelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectModelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;DBFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;some Storage&lt;/code&gt;定义了实现&lt;code class=&quot;highlighter-rouge&quot;&gt;Storage&lt;/code&gt;协议这一类型的返回对象，通过这个语法就可以把所有的实现都封装起来，只暴露接口给上层。然后上层的调用只要简单的一行代码就可以搞定。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DBFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;openDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;objectModelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SimpleDataBase&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dbName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;TestCoreData&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样底层数据库的实现替换了也不会影响上层的代码。&lt;strong&gt;注意我上面的代码是简化了框架中的实现，具体的实现要看下源码，会复杂一些但是思想是一样的。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;entity实践&quot;&gt;Entity实践&lt;/h3&gt;

&lt;p&gt;针对之前提到的Swift协议中extension用法，这里看下&lt;code class=&quot;highlighter-rouge&quot;&gt;SimpleCoreData&lt;/code&gt;中时如何应用的。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Equatable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;primeKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;syncDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;jsonObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primeKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primeKey&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;数据库存储的对象，很重要的一个属性就是&lt;code class=&quot;highlighter-rouge&quot;&gt;primeKey&lt;/code&gt;。往往在比较两个对象是否一样的时候，只要&lt;code class=&quot;highlighter-rouge&quot;&gt;primeKey&lt;/code&gt;一致就可以了。所以Entity协议就把比较操作抽离出来作为一个公共方法。而&lt;code class=&quot;highlighter-rouge&quot;&gt;syncDictionary&lt;/code&gt;这个方法是把数据存储到数据库中常用的手段，这里就需要实现的类完成这个操作了。&lt;/p&gt;

&lt;h3 id=&quot;dbobservable实践&quot;&gt;DBObservable实践&lt;/h3&gt;

&lt;p&gt;数据库存储中，上层经常会用到一个方法，就是当存储的数据变化时，通知上层做一些UI方面的刷新。下面就来看下如何利用associatedtype把数据库这个公共操作抽离出来。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DBObservable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;associatedtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Elment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Entity&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;observer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;StorageDataChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Elment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StorageDataChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isDeletion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isInsertion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isFetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从上面的代码中可以看出数据库观察者有重要的两个属性，首先要知道要观察的实体对象是什么，这里就用到了通用的&lt;code class=&quot;highlighter-rouge&quot;&gt;associatedtype&lt;/code&gt;方法，其次就要知道数据库当前的&lt;code class=&quot;highlighter-rouge&quot;&gt;context&lt;/code&gt;，也就是数据的内存中分布的情况。然后可以定义数据库更新常用操作的枚举(update,delete,insert,fetch)，就可以方便的抽离出来公共方法，然后实现的类，只要关注&lt;code class=&quot;highlighter-rouge&quot;&gt;func observer(_ closure:@escaping ([StorageDataChange&amp;lt;Elment&amp;gt;]) -&amp;gt; Void) -&amp;gt; Void&lt;/code&gt;方法实现就可以了。&lt;/p&gt;

&lt;h2 id=&quot;swift-package管理&quot;&gt;swift package管理&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SimpleCoreData&lt;/code&gt; 目前是使用Swift Package来管理的。相对于pod中心化的仓库管理，Swift Package是去中心化的，更像Carthage的用法。如果想了解详细的用法可以参考苹果的文档&lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;swift package&lt;/a&gt;。苹果还提供了xcode工程&lt;a href=&quot;https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app&quot;&gt;如何快速集成swift package的方法&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SimpleCoreData&lt;/code&gt; 完整的实现，已经放在了GitHub上&lt;a href=&quot;https://github.com/animeng/SimpleCoreData&quot;&gt;链接地址&lt;/a&gt;。这个是自己对Swift语言面向协议编程的一个实践，还有很多不完善的地方,抛砖引玉，希望大家多多给些意见。&lt;/p&gt;</content><author><name>mengtnt</name></author><summary type="html">面向协议编程是Swift语言的一个很大的特点，wwdc中有一节经典的Session面向协议编程对Swift这个语法特性做了详细的分析。下面分享的内容主要是利用Swift面向协议编程特性，封装CoreData数据库的API。至于为何要选择CoreData数据库也是因为Coredata很多API其实对于初学者非常不友好，也是想通过Swift语言的一些优秀特性来简化API的操作，也特意为此起了一个名字叫SimpleCoredata。</summary></entry></feed>